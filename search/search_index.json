{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aiuta Virtual Try-On Solutions","text":"<p>Let your customers visualize how clothes look on them \u2014 instantly and accurately</p> <ul> <li>High quality visualisation</li> <li>7x faster than the average competitor</li> <li>Preserve pose and body shape</li> </ul>"},{"location":"#available-as","title":"Available as","text":"<ul> <li> <p> Android SDK</p> <pre><code>minSdkVersion: 23\ntargetSdkVersion: 35\ncom.android.application: 8.6.0\nndkVersion: 26.1.10909125\n</code></pre> <p> Overview \u00a0 \u2022 \u00a0 Quick Start</p> </li> <li> <p> iOS SDK</p> <pre><code>iOS: 13+\nswift: 5.10\nXcode: 15.3+\n</code></pre> <p> Overview \u00a0 \u2022 \u00a0 Quick Start</p> </li> <li> <p> Flutter SDK</p> <p><pre><code>sdk: &gt;=3.1.0 &lt;4.0.0\nflutter: &gt;= 3.19.6\n</code></pre> <sup>\u00a0 Android \u00a0  iOS</sup></p> <p> Overview \u00a0 \u2022 \u00a0 Quick Start</p> </li> <li> <p> Web SDK</p> <p>Coming soon</p> </li> <li> <p> Shopify App</p> <p> Overview </p> </li> <li> <p> API</p> <p> Overview \u00a0 \u2022 \u00a0 Getting Started</p> </li> </ul> <ul> <li> Discover more fashion services at aiuta.com </li> </ul>"},{"location":"api/getting-started/","title":"Getting Started","text":""},{"location":"api/getting-started/#creating-an-account","title":"Creating an Account","text":"<p>To create an account, start by selecting either the <code>Sign Up</code> or <code>Login</code>  option from the top header . A pop-up window will appear with tabbed options, allowing you to either log in with an existing account or sign up for a new one. If you choose the \"Sign Up\" link, the pop-up will automatically display the corresponding tab.</p> <p>To complete the sign-up process, simply follow the on-screen instructions, and your account will be ready in no time. </p> <p>Verify your email address</p> <p>After registering, you will receive an email prompting you to verify your email address.</p>"},{"location":"api/getting-started/#obtaining-credentials","title":"Obtaining credentials","text":"Just registeredAlready subscribed <p>To obtain credentials for accessing an API product, you must first subscribe to at least one of its plans . Subscribing to a plan is straightforward: simply select the desired product and click \"Subscribe,\" following the prompts on the page.</p> <p>After subscribing to the API product of your choice, you will be able to obtain your credentials from the subscription details. Upon completing the subscription process, you will be immediately redirected to a page displaying all the necessary details of the product, including the required credentials.</p> <p>To retrieve the credentials for a product you have previously subscribed to, navigate to the <code>My Subscriptions</code>  section at the top of the page, and select the product for which you want to view the key.</p>"},{"location":"api/getting-started/#authentication","title":"Authentication","text":"<p>Authentication is mandatory for some calls such as starting the image generation and is optional for the others trivial calls such as checking the status of the operation. </p> <p>Optional authentication</p> <p>You may use <code>x-user-id</code> header instead of authentication header with a secret value for the trivial calls. The value of <code>x-user-id</code> header should be your subscription ID (such as <code>66ec1726e728c1405e5ebca2</code>). You can find the subscription ID in the URL of a subscription you have.</p> Using API keyUsing JWT <p>The API key authentication method is used for server-side integrations with the Aiuta API. It involves a static key that must be included in each API request within the <code>X-API-Key</code> HTTP header.</p> <p>Using JSON Web Tokens (JWT) is the most flexible and secure way to access the Aiuta API. Once you have the secret, the tokens can be issued by your backend and then verified by Aiuta to ensure that the request originated from your application and to check the integrity of the request.</p> <p>Also you manage the expiration time of the tokens you generate by setting <code>exp</code> claim. Setting the expiration time will prevent misuse of compromised tokens.</p> <p>The flow is as follows:</p> <ul> <li>The client requests a token from your backend service using your internal client-server communication. The client can provide an arbitrary set of arguments to be included in the payload to be signed.</li> <li>Your application backend validates the parameters provided by the client (e.g., input image to generate, SKU ID, etc.) and issues a JWT using the private key configured during the Obtaining credentials step. All parameters significant to security and cost efficiency should be included in the JWT payload. You can also control the token\u2019s expiration time. Refer to the documentation for detailed instructions on implementing the backend component.</li> <li>The JWT can then be used by your application client to access the Aiuta API until it expires.</li> </ul> <p>To make requests to the Aiuta API, use the Bearer Authentication HTTP scheme with the issued token: <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre></p>"},{"location":"api/getting-started/#making-an-api-request","title":"Making an API Request","text":"<ul> <li> See examples of requests in the API reference </li> </ul>"},{"location":"api/overview/","title":"Aiuta Virtual Try-On API","text":"<p>For those seeking more control over the implementation or having specific requirements, the Aiuta API can be used directly. This method provides complete flexibility in building a custom virtual try-on solution.</p> <p>Aiuta SDKs is built on top of this API, providing a pre-built UI layer and additional convenience features while maintaining the same core functionality.</p>"},{"location":"api/overview/#links","title":"Links","text":"<ul> <li> API Portal </li> <li> Status and incidents </li> </ul>"},{"location":"api/server-side-auth-component/","title":"JWT server-side auth example","text":"<p>Here is the example of the required backend logic that needs to be implemented to support JWT authentication scheme.</p> <p>Using this scheme, you can issue an authentication token for your client using your private key after properly validating the request parameters. This allows you to decide whether the client still has the ability to use the Aiuta product, enabling you to enforce any per-client limits. Additionally, you can include specific parameters in the JWT payload to ensure that the client uses these exact values when making requests to Aiuta. For example, you can include parameters required for image generation to ensure that the issued token will be used for this generation only.</p> <p>You need to install the following dependencies:</p> <pre><code>pip install PyJWT\n</code></pre> <p>And then implement API handle like this:</p> <pre><code>import datetime\nimport json\n\nimport jwt\nfrom flask import Flask\nfrom flask import request\nfrom flask import Response\n\njwt_issuer = \"&lt;ISSUER_ID&gt;\" # (1)!\njwt_secret = \"&lt;JWT_SECRET&gt;\" # (2)!\n\ntoken_valid_time = datetime.timedelta(seconds=60)\n\napp = Flask(__name__)\n\n\n@app.route(\"/aiuta_jwt\", methods=[\"GET\", \"POST\"])\ndef get_jwt_token():\n    issued_at = datetime.datetime.utcnow()\n    expires_at = issued_at + token_valid_time\n    meta = {\n        \"iss\": jwt_issuer,\n        \"iat\": issued_at,\n        \"exp\": expires_at,\n    }\n\n    payload = {}\n    if request.args:\n        payload.update(request.args)\n    if request.is_json:\n        payload.update(request.json)\n    payload.update(meta)\n\n    token = jwt.encode(\n        payload,\n        jwt_secret,\n        algorithm=\"HS256\",\n    )\n    return Response(\n        json.dumps({\"type\": \"jwt\", \"token\": token}),\n    )\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host=\"0.0.0.0\", port=8080)\n</code></pre> <ol> <li> <p>Find the value in your API plan subscription </p> <p>Field in the UI</p> <p>JWT key (iss)</p> </li> <li> <p>Find the value in your API plan subscription </p> <p>Field in the UI</p> <p>JWT secret (to generate HS256 signature)</p> </li> </ol>"},{"location":"sdk/demo-apps/","title":"SDK Demo Apps","text":"<p>Experience Aiuta SDK in action through our demo applications. These applications showcase the full range of virtual try-on capabilities and customization options available in the SDK.</p>"},{"location":"sdk/demo-apps/#available-demo-apps","title":"Available Demo Apps","text":"<ul> <li> Download on the App Store</li> <li> Get it on Google Play</li> </ul>"},{"location":"sdk/demo-apps/#using-the-demo","title":"Using the Demo","text":"<ol> <li>Download the appropriate demo app for your platform <sup>1</sup></li> <li>Use <code>AIUTADEMO</code> or your own code <sup>2</sup>\u00a0 to access the demo catalog</li> <li>Select an item from the catalog and tap \"Try on\" </li> <li>Experience the SDK and virtual try-on in action</li> <li>Explore various SDK pages and features</li> </ol>"},{"location":"sdk/demo-apps/#features-available","title":"Features Available","text":"<p>The demo applications helps you to:</p> <ul> <li>Experience the complete virtual try-on flow</li> <li>Explore the user interface and navigation</li> <li>Test the performance and quality of virtual try-ons</li> <li>Test different UI customization options <sup>3</sup></li> <li>Experience the SDK's integration capabilities</li> <li>Demonstrate the technology to stakeholders</li> <li>Plan your implementation</li> </ul> <ol> <li> <p>The iOS demo app uses unlisted distribution on the App Store, discoverable only with a direct link above.\u00a0\u21a9</p> </li> <li> <p>You can arrange with Aiuta to create a test catalog with your own products, and we will provide you with a personal access code.\u00a0\u21a9</p> </li> <li> <p>The Android demo app currently has limited customization capabilities compared to the iOS version. For the most comprehensive demonstration of the SDK's customization features, we recommend trying the iOS demo app. However, please note that both Android and iOS SDKs provide same customization and interaction capabilities for your production applications.\u00a0\u21a9</p> </li> </ol>"},{"location":"sdk/overview/","title":"Aiuta Virtual Try-On SDK","text":"<p>Let your customers visualize how clothes look on them \u2014 instantly and accurately</p>"},{"location":"sdk/overview/#aiuta-sdk-benefits","title":"Aiuta SDK Benefits","text":"<ul> <li>High quality visualisation, preserve pose and body shape</li> <li>Simple integration into your existing application with default settings</li> <li>Flexible UI customization to match your brand</li> <li>Rich set of features for creating a unique user experience</li> <li>Full control over user data and settings</li> <li>Detailed usage analytics on every SDK page and feature</li> <li>Ready-made solutions for interacting with your application</li> </ul>"},{"location":"sdk/overview/#platform-availability","title":"Platform Availability","text":"<ul> <li> <p> Android</p> <pre><code>minSdkVersion: 23\ntargetSdkVersion: 35\ncom.android.application: 8.6.0\nndkVersion: 26.1.10909125\n</code></pre> <p> Quick Start</p> </li> <li> <p> iOS</p> <pre><code>iOS: 13+\nswift: 5.10\nXcode: 15.3+\n</code></pre> <p> Quick Start</p> </li> <li> <p> Flutter</p> <p><pre><code>sdk: &gt;=3.1.0 &lt;4.0.0\nflutter: &gt;= 3.19.6\n</code></pre> <sup>\u00a0 Android \u00a0  iOS</sup></p> <p> Quick Start</p> </li> <li> <p> Web SDK</p> <p>Coming soon</p> </li> </ul>"},{"location":"sdk/overview/#alternative-direct-api","title":"Alternative \u2013 Direct API","text":"<p>If you prefer even more control over the implementation or have specific requirements, you can use the Aiuta API directly. This approach gives you complete flexibility in building your custom virtual try-on solution.</p> <ul> <li> Learn more about Aiuta Virtual Try-On API</li> </ul> <p>Aiuta SDK is built on top of the same API, providing a pre-built UI layer and additional convenience features while maintaining the same core functionality.</p>"},{"location":"sdk/about/analytics/analytics/","title":"Analytics Events","text":"<p>This document describes the analytics events that can be tracked within the Aiuta SDK. These events are triggered in response to user actions or state changes and can be used to track user interactions or system behaviors in your analytics system.</p>"},{"location":"sdk/about/analytics/analytics/#event-categories","title":"Event Categories","text":"Type Parameters Description <code>page</code> <code>pageId</code><code>productIds</code> Navigation to a specific page in the SDK UI <code>onboarding</code> <code>event</code><code>pageId</code><code>productIds</code> Interactions during the onboarding process, including viewinginformational screens and providing necessary consents fordata processing <code>picker</code> <code>event</code><code>pageId</code><code>productIds</code> Interactions with the image selection interface, including cameraaccess, gallery selection, and predefined model selection <code>tryOn</code> <code>event</code><code>pageId</code><code>productIds</code> Virtual try-on operations reports, including photo upload,processing status, and completion or error states <code>results</code> <code>event</code><code>pageId</code><code>productIds</code> Interactions with the generated try-on results, including sharing,saving to wishlist, adding to cart, or requesting new generations <code>feedback</code> <code>event</code><code>pageId</code><code>productIds</code> Feedback on the generated results, including positive ratings anddetailed negative feedback with optional comments <code>history</code> <code>event</code><code>pageId</code><code>productIds</code> Interactions with previously generated results, including viewing,sharing, and managing saved generations <code>exit</code> <code>pageId</code><code>productIds</code> Exit from the SDK on a specific page,indicating the final point in the user's journey"},{"location":"sdk/about/analytics/analytics/#page-identifiers","title":"Page Identifiers","text":"Page Description <code>welcome</code> Optional Welcome Screen that introduces users to the SDK functionalityand provides an entry point to start the try-on process <code>howItWorks</code> Informational screen explaining the virtual try-on process,including samples of expected outcomes <code>bestResults</code> Guide screen showing best practices for achieving optimaltry-on results with example images and tips <code>consent</code> Screen for obtaining user consent for data processing andprivacy policy acceptance in standalone mode <code>imagePicker</code> Interface for selecting or capturing images, including cameraaccess, gallery browsing, uploads history, and predefined model selection <code>loading</code> Transition screen displayed during image processing andvirtual try-on generation <code>results</code> Screen displaying generated try-on results with options toshare, save, or request new generations <code>history</code> Screen showing previously generated try-on results withoptions to view, share, or manage saved generations"},{"location":"sdk/about/analytics/analytics/#products-identifiers","title":"Products Identifiers","text":"<p>This is a list of product identifiers in the context of the current try-on session or other SDK interaction. It can be empty, for example, when opening a separate screen to view the user's generation history, where there is no try-on context. In the case of a single try-on, the list will contain one identifier. Accordingly, when using multi-try-on, the list will contain identifiers of all products from the outfit.</p>"},{"location":"sdk/about/analytics/analytics/#specific-events","title":"Specific Events","text":"<p>Event categories, except for <code>page</code> and <code>exit</code>, contain an <code>event</code> parameter that indicates which specific event occurred in that category.</p>"},{"location":"sdk/about/analytics/analytics/#onboarding-events","title":"Onboarding Events","text":"Event Parameters Description <code>welcomeStartClicked</code> Initial interaction with the Welcome Screen, indicatinguser's intent to begin the try-on process <code>onboardingFinished</code> Completion of all onboarding steps <code>consentsGiven</code> <code>consentsIds</code> Explicit acceptance of required consents, includingdata processing and privacy policy agreements"},{"location":"sdk/about/analytics/analytics/#picker-events","title":"Picker Events","text":"Event Description <code>cameraOpened</code> Activation of the device camera for capturing newphotos for the try-on process <code>newPhotoTaken</code> Successful capture of a new photo using thedevice camera <code>photoGalleryOpened</code> Access to the device's photo gallery for selectingexisting images <code>galleryPhotoSelected</code> Selection of an existing photo from the device'sgallery for try-on <code>uploadsHistoryOpened</code> Access to previously uploaded photos within theSDK's history <code>uploadedPhotoSelected</code> Selection of a previously uploaded photo fromthe SDK's history <code>uploadedPhotoDeleted</code> Removal of a previously uploaded photo fromthe SDK's history <code>predefinedModelsOpened</code> Access to the list of predefined model imagesavailable for try-on <code>predefinedModelSelected</code> Selection of a predefined model image forthe try-on process"},{"location":"sdk/about/analytics/analytics/#try-on-events","title":"Try-On Events","text":"Event Parameters Description <code>photoUploaded</code> Successful upload of a selected or capturedphoto for processing <code>tryOnStarted</code> Initiation of the virtual try-on process withthe selected image <code>tryOnFinished</code> Successful completion of the virtual try-onprocess with generated results <code>tryOnAborted</code> Cancellation of the try-on process beforecompletion <code>tryOnError</code> <code>errorType</code><code>errorMessage</code> Occurrence of an error during the try-on process, requiring user attentionMessage contains information for developers and is not for users"},{"location":"sdk/about/analytics/analytics/#results-events","title":"Results Events","text":"Event Description <code>resultShared</code> Sharing of generated try-on results throughavailable sharing channels <code>productAddToWishlist</code> Adding of a product from the try-on resultsto the user's wishlist <code>productAddToCart</code> Adding of a product from the try-on resultsto the shopping cart <code>pickOtherPhoto</code> Request to start a new try-on process witha different photo"},{"location":"sdk/about/analytics/analytics/#feedback-events","title":"Feedback Events","text":"Event Parameters Description <code>positive</code> The user left positive feedback on try-on results withno specific issues reported <code>negative</code> <code>option</code><code>text</code> The user report of issues with try-on results, includingspecific problem category and optionaldetailed feedback"},{"location":"sdk/about/analytics/analytics/#history-events","title":"History Events","text":"Event Description <code>generatedImageShared</code> Sharing of a previously generated try-onresult from the history <code>generatedImageDeleted</code> Removal of a previously generated try-onresult from the history"},{"location":"sdk/about/analytics/errors/","title":"Try-On Errors","text":"<p>This document describes all possible errors that can occur during the try-on process. Errors are sent via the analytics event <code>tryOn.tryOnError</code> in the <code>errorType</code> field.</p> Error Type Description <code>preparePhotoFailed</code> Any reason users' photo cannot be processed by the SDK,that is not related to the try-on generation process on the server.This covers failure to read, downscale, compress and get JPG dataof the photo. <code>uploadPhotoFailed</code> Any reason users' photo cannot be uploaded to the server.This may be caused by network issues, server issues, or any other reason. <code>authorizationFailed</code> The request to the server was not authorized. <code>requestOperationFailed</code> SDK failed to make a request to the server to start the try-on process.This may be caused by network issues, server issues, or any other reason. <code>startOperationFailed</code> SDK successfully made a request to the server to start the try-on process,but the server returned an error. <code>operationFailed</code> SDK successfully made a request to the server to start the try-on process,operation was started, but the server returned an error while processingthe operation, and it was failed. SDK stopped waiting for the result. <code>operationAborted</code> SDK successfully made a request to the server to start the try-on process,operation was started, but the server aborted the operation,because of the invalid user input photo. <code>operationTimeout</code> SDK successfully made a request to the server to start the try-on process,operation was started, but the status of the operation was not changedfor a long time, and the SDK stopped waiting for the result. <code>operationEmptyResults</code> Try-on operation was completed, but the empty result was returned. <code>downloadResultFailed</code> Try-on operation was completed, but the result was not downloaded.This may be caused by network issues, server issues, or any other reason. <code>internalSdkError</code> Unexpected error occurred during the try-on process.Those should be reported to the SDK developers, as it is notsupposed to happen."},{"location":"sdk/about/developer/common-models/","title":"Common Models Schemes","text":""},{"location":"sdk/about/developer/common-models/#product","title":"Product","text":"<p>The product scheme defines the structure and properties of products within the Aiuta platform. This scheme is essential for displaying product information in the SDK's user interface and managing product-related functionality.</p> <pre><code>Product {\n  id: String // (1)!\n  title: String // (2)!\n  brand: String // (3)!\n  imageUrls: List&lt;String&gt; // (4)!\n  price: Price | null // (5)!\n}\n</code></pre> <ol> <li>Unique identifier for the product, used to distinguish it across the platform. Must match the identifiers provided to Aiuta for training try-on models.</li> <li>The name or title of the product, displayed prominently in the user interface.</li> <li>The brand associated with the product, identifying the manufacturer or provider.</li> <li>Collection of URLs pointing to product images. Should contain at least one URL. Flatlay image must be first if <code>ProductBarTheme</code> has enabled <code>applyProductFirstImageExtraPadding</code>.</li> <li>Optional pricing details for the product, including current and old prices.</li> </ol>"},{"location":"sdk/about/developer/common-models/#price","title":"Price","text":"<pre><code>Price {\n  current: String // (1)!\n  old: String | null // (2)!\n}\n</code></pre> <ol> <li>Current price of the product, formatted as a localized string including currency symbol and amount.</li> <li>Optional old price of the product, formatted as a localized string. If provided, will be displayed as strikethrough near the current price.</li> </ol>"},{"location":"sdk/about/developer/common-models/#consent","title":"Consent","text":"<p>The Consent type defines how user consent is managed within the SDK, specifying the interaction required from the user and the conditions under which consent is considered given.</p> <pre><code>Consent {\n  id: String // (1)!\n  type: ConsentType // (2)!\n  html: String // (3)!\n}\n</code></pre> <ol> <li>Unique identifier for the consent option.</li> <li>Type of consent determining how it should be presented and handled.</li> <li>HTML content containing the consent terms and conditions.</li> </ol>"},{"location":"sdk/about/developer/common-models/#type","title":"Type","text":"<pre><code>enum ConsentType {\n  implicitWithoutCheckbox // (1)!\n  implicitWithCheckbox // (2)!\n  explicitRequired // (3)!\n  explicitOptional // (4)!\n}\n</code></pre> <ol> <li> <p>Consent has no checkbox and it is assumed to be given by pressing the accept button. </p> <p>GDPR Compliance</p> <p>It can be just an accept button, but only if it's very clear exactly what the user is consenting to at that moment. You can't bundle multiple consents into one accept unless they're strictly necessary. For example, GDPR says marketing consent should always be separate if possible.</p> <p>Please consider that this option is not valid for all cases, and it should be used with caution. </p> <p>Consult with a legal department if in doubt.</p> </li> <li> <p>Consent has disabled pre-ticked checkbox and it is assumed to be given by pressing the accept button. </p> <p>GDPR Compliance</p> <p>This can be used only for the consent that is necessary for the service, as it's not really \"consent\" under GDPR \u2014 it's processing based on contract necessity (Article 6(1)(b)) or legal obligation, not based on \"freely given consent\" (Article 6(1)(a)). So, it is just informing the user, not asking them for an additional permission.</p> <p>Please consider that this option is not valid for all cases, and it should be used with caution. </p> <p>Consult with a legal department if in doubt.</p> </li> <li> <p>Consent has a checkbox and the user must check it in order to continue.</p> </li> <li>Consent has a checkbox and the user may proceed without checking it.</li> </ol> <p>Defines the methods for obtaining consent to process user photos.</p> <p>GDPR Compliance</p> <p>Be careful when using implicit consent types. </p> <p>Ensure to review annotations  for clarity and compliance.</p>"},{"location":"sdk/about/developer/common-models/#history-images","title":"History Images","text":"<p>The History Images represent a user's interaction history in the Aiuta SDK, including boths user-uploaded and Aiuta-provided images.</p>"},{"location":"sdk/about/developer/common-models/#input-image","title":"Input Image","text":"<pre><code>InputImage {\n    id: String // (1)!\n    url: String // (2)!\n    ownerType: OwnerType // (3)!\n}\n</code></pre> <ol> <li>A unique string identifier assigned to the image by the Aiuta API, ensuring each image can be distinctly recognized and referenced within the system.</li> <li>The URL pointing to the location of the image resource, which can be accessed and retrieved by the SDK to present in the UI.</li> <li> <p>The type of the image owner .</p> <p>Please refer to this section in case of using custom <code>dataProvider</code> for the uploads history</p> </li> </ol> <p>Input images used in the Aiuta SDK for try-on sessions can either be uploaded by users, such as photos taken with their camera or selected from their gallery, or they can be predefined model images provided by Aiuta.</p>"},{"location":"sdk/about/developer/common-models/#generated-image","title":"Generated Image","text":"<pre><code>GeneratedImage {\n    id: String // (1)!\n    url: String // (2)!\n    ownerType: OwnerType // (3)!\n    productIds: List&lt;String&gt; // (4)!\n}\n</code></pre> <ol> <li>A unique string identifier assigned to the image by the Aiuta API, ensuring each image can be distinctly recognized and referenced within the system.</li> <li>The URL pointing to the location of the image resource, which can be accessed and retrieved by the SDK to present in the UI.</li> <li> <p>The type of the image owner .</p> <p>Please refer to this section in case of using custom <code>dataProvider</code> for the generations history</p> </li> <li> <p>A list of product identifiers that were utilized during the image generation process. Each identifier corresponds to a specific product involved in the try-on session, allowing for precise tracking and reference within the system.</p> </li> </ol> <p>Generated images represent the results of try-on sessions. These images are generated based on either a photo uploaded by the user or a predefined model image provided by Aiuta.</p>"},{"location":"sdk/about/developer/common-models/#owner-type","title":"Owner Type","text":"<pre><code>enum OwnerType {\n    user // (1)!\n    aiuta // (2)!\n}\n</code></pre> <ol> <li> <p>Image uploaded or generated by the user (using a camera or from a gallery).</p> <p>This image belongs to the user. When the user removes the image from the history, it may be deleted from the storage as well.</p> </li> <li> <p>Image of the model provided or generated by the Aiuta. </p> <p>This image could be linked to the user history, but it is not owned by the user, and can not be deleted from the storage, only unlinked from the user's history in case of removing.</p> </li> </ol> <p>Owner type primarily determines the source of origin of the image \u2014 whether it was generated by the user as a result of any chain of operations from upload to generation, possibly including re-generation. Alternatively, the image is not associated with the user's personal data and does not belong to them. This allows different approaches to be taken when deleting images from the history.</p> <p>Do not delete <code>aiuta</code> owned image files</p> <p>Well, you can make a request to delete such an image, nothing terrible will happen, but be prepared that Aiuta API will return an error when you try.</p> <p>But ideally, you should only link/unlink those images in the user's history.</p>"},{"location":"sdk/about/developer/configuration/","title":"Configuration Scheme","text":"<p>The configuration is structured as a hierarchical object that controls various aspects of the SDK's behavior, appearance, and functionality. The configuration is designed to be flexible and extensible, allowing for customization of features, UI elements, and behavior.</p> Type Definitions <p>Please, refer to the  platform specific types used in this scheme and the  common models schemes</p> Naming Convention <p>Implementation and naming details may vary depending on the specific platform, but the core concepts and overall structure remain consistent across all platforms. For example type names, described in the schemes, like: </p> <ul> <li> <p><code>Configuration</code></p> <ul> <li>in Swift it will be <code>Aiuta.Configuration</code></li> <li>in Kotlin and Dart - <code>AiutaConfiguration</code></li> </ul> </li> <li> <p><code>UserInterface</code></p> <ul> <li>in Swift it will be <code>Aiuta.Configuration.UserInterface</code></li> <li>in Kotlin and Dart - <code>AiutaUserInterfaceConfiguration</code></li> </ul> </li> <li> <p><code>Product</code></p> <ul> <li>in Swift it will be <code>Aiuta.Product</code></li> <li>in Kotlin and Dart - <code>AiutaProduct</code></li> </ul> </li> </ul> <p>and so on - the key part of the name is the same.</p> <p>A scheme-based approach in the documentation applies core concepts and structures uniformly, unifying the SDK's understanding and implementation. By following this strategy, we achieve consistency in our SDK's implementations and minimize redundancy in our documentation for each platform. We use this documentation ourselves for development.</p> <p>Annotations</p> <p>Don't miss them - click  for more details</p>"},{"location":"sdk/about/developer/configuration/#configuration","title":"Configuration","text":"<pre><code>Configuration {\n  auth: Auth // (1)!\n  userInterface: UserInterface // (2)!\n  features: Features // (3)!\n  analytics: Analytics | null // (4)!\n  debugSettings: DebugSettings // (5)!\n}\n</code></pre> <ol> <li> <p> Required to authenticate Aiuta SDK to use API  with your credentials. Supported authentication methods are <code>ApiKey</code> or <code>Jwt</code> + <code>subscriptionId</code>. </p> <p>Please see API documentation  Obtaining credentials section for instructions on how to get your credentials.</p> </li> <li> <p> Configuration of the user interface presentation style, swipe-to-dismiss policy, and UI components themes for the Aiuta SDK.</p> </li> <li> <p> Describes the set of features enabled in the SDK for the user and thier interaction with the app.</p> </li> <li> <p> Allows to receive analytics events from the SDK and send them to your analytics provider.</p> </li> <li> <p> Controls the logging settings and validation policies for various parameters.</p> </li> </ol>"},{"location":"sdk/about/developer/configuration/#auth","title":"Auth","text":"ApiKeyJwt <pre><code>ApiKeyAuth {\n  apiKey: String // (1)!\n}\n</code></pre> <ol> <li> <p>The <code>apiKey</code> is used to authenticate all outgoing requests from the Aiuta SDK to the Aiuta API. This key ensures that the requests are linked to your account, allowing the SDK to access the necessary resources and services provided by Aiuta. </p> <p>Please see API documentation  obtaining credentials section for instructions on how to get your <code>apiKey</code>.</p> </li> </ol> <pre><code>JwtAuth {\n  subscriptionId: String // (1)!\n  getJwt: Callback(Map&lt;String: String&gt;) =&gt; String // (2)!\n}\n</code></pre> <ol> <li> <p>The <code>subscriptionId</code> is used to authenticate requests that do not require secure transmission. It acts as a key to ensure that the requests are properly linked to your subscription and account.</p> <p>Please see API documentation  obtaining credentials section for instructions on how to find your <code>subscriptionId</code>.</p> </li> <li> <p>This method is invoked by the SDK each time a tryOn request necessitates authentication     through a JSON Web Token. The implementation of this method should securely     generate the JWT on the server side and subsequently return it to the SDK.</p> <p>The SDK will provide a set of key-value pairs that represent the <code>parameters</code> of the request requiring a JWT. These parameters include identifiers like a <code>uploaded_image_id</code> and <code>product_id</code> and can be used  for associating the JWT with the specific image and product involved in the tryOn request.  This ensures that the generated token is tailored specifically to the request being processed, enhancing security and relevance.</p> <p>Returns</p> <p>Non-empty string representing the generated JWT</p> <p>Throws</p> <p>An error if the JWT cannot be generated. </p> <p>If an error is thrown, the SDK will be unable to complete the tryOn request and will display an error message to the user</p> <p>See JWT server-side auth example  for more details on securely generating JWTs.</p> </li> </ol>"},{"location":"sdk/about/developer/configuration/#user-interface","title":"User Interface","text":"<ul> <li> \u00a0 continue on user interface configuration page...</li> </ul>"},{"location":"sdk/about/developer/configuration/#features","title":"Features","text":"<ul> <li> \u00a0 continue on features configuration page...</li> </ul>"},{"location":"sdk/about/developer/configuration/#analytics","title":"Analytics","text":"<pre><code>Analytics {\n  handler: {\n    onAnalyticsEvent: Callback(Event) // (1)!\n  }\n}\n</code></pre> <ol> <li> <p>Callback function that processes analytics events generated by the SDK, allowing integration with external analytics services or custom event handling.</p> <p> All events are listed in the analytics section</p> </li> </ol>"},{"location":"sdk/about/developer/configuration/#debugsettings","title":"DebugSettings","text":"<pre><code>DebugSettings {\n  isLoggingEnabled: Bool // (1)!\n  emptyStringsPolicy: ValidationPolicy // (2)!\n  unavailableResourcesPolicy: ValidationPolicy // (3)!\n  infoPlistDescriptionsPolicy: ValidationPolicy // (4)!\n  listSizePolicy: ValidationPolicy // (5)!\n}\n\nenum ValidationPolicy {\n  ignore // (6)!\n  warning // (7)!\n  fatal // (8)!\n}\n</code></pre> <ol> <li>Controls whether the SDK should log debug information, providing detailed logs to help developers understand its behavior.</li> <li>Validation policy for checking whether required strings in the SDK configuration are not empty, preventing runtime issues.</li> <li>Validation policy for checking whether required resources are available and properly configured.</li> <li>Validation policy for checking whether the <code>info.plist</code> file contains all required descriptions for enabled features.</li> <li>Validation policy for checking whether lists required by the SDK are of the correct size.</li> <li>Ignores all validation errors, allowing the SDK to proceed without taking any action.</li> <li>Logs validation errors to the console for debugging purposes without interrupting execution.</li> <li>Stops the application's execution with a fatal error when validation errors occur.</li> </ol>"},{"location":"sdk/about/developer/features/","title":"Features Configuration Scheme","text":"<ul> <li> \u00a0 ... part of configuration page</li> </ul> <p>Describes the set of features enabled in the SDK for the user and thier interaction with the app.</p>"},{"location":"sdk/about/developer/features/#features","title":"Features","text":"<pre><code>Features {\n  welcomeScreen: WelcomeScreenFeature | null // (1)!\n  onboarding: OnboardingFeature | null // (2)!\n  consent: ConsentFeature | null // (3)!\n  imagePicker: ImagePickerFeature // (4)!\n  tryOn: TryOnFeature // (5)!\n  share: ShareFeature | null // (6)!\n  wishlist: WishlistFeature | null // (7)!\n}\n</code></pre> <ol> <li> Configures an optional welcome screen that introduces users to the SDK's functionality.</li> <li> Sets up the onboarding process to guide users through the SDK's features and capabilities.</li> <li> Manages user consent options for data processing, which can be integrated with onboarding or used independently.</li> <li> Controls the image selection interface, allowing users to pick photos, take new ones, use predefined models, or access previous uploads.</li> <li> Configures the core virtual try-on functionality for trying products virtually.</li> <li> Enables sharing capabilities for generated try-on images with customizable options.</li> <li> Integrates with the host app's wishlist functionality for product management.</li> </ol>"},{"location":"sdk/about/developer/features/#welcome-screen","title":"Welcome Screen","text":"<pre><code>WelcomeScreenFeature {\n  images: {\n    welcomeBackground: Image // (1)!\n  },\n  icons: {\n    welcome82: Icon // (2)!\n  },\n  strings: {\n    welcomeTitle: String // (3)!\n    welcomeDescription: String // (4)!\n    welcomeButtonStart: String // (5)!\n  },\n  typography: {\n    welcomeTitle: TextStyle // (6)!\n    welcomeDescription: TextStyle // (7)!\n  }\n}\n</code></pre> <ol> <li>Sets the background image that covers the entire welcome screen.</li> <li>Defines the main icon displayed in the center of the welcome screen above the title.</li> <li>Specifies the main title text displayed on the welcome screen.</li> <li>Configures the descriptive text that appears below the title on the welcome screen.</li> <li>Sets the text label for the button that initiates the onboarding process or main interface.</li> <li>Controls the text style for the welcome screen's main title.</li> <li>Defines the text style for the welcome screen's description text.</li> </ol>"},{"location":"sdk/about/developer/features/#onboarding","title":"Onboarding","text":"<pre><code>OnboardingFeature {\n  howItWorksPage: OnboardingHowItWorksPageFeature // (1)!\n  bestResultsPage: OnboardingBestResultsPageFeature | null // (2)!\n  strings: {\n    onboardingButtonNext: String // (3)!\n    onboardingButtonStart: String // (4)!\n  },\n  shapes: {\n    onboardingImageL: Shape // (5)!\n    onboardingImageS: Shape // (6)!\n  },\n  dataProvider: BuiltIn | Custom {\n    isOnboardingCompleted: Observable&lt;Bool&gt; // (7)!\n    completeOnboarding: Callback() // (8)!\n  }\n}\n</code></pre> <ol> <li> Configures the first page of onboarding that demonstrates how virtual try-on works through interactive examples.</li> <li> Sets up an optional page showing examples of photos that yield the best try-on results.</li> <li>Defines the text label for the navigation button to proceed to the next onboarding page.</li> <li>Specifies the text label for the button that completes onboarding and starts the main interface.</li> <li>Controls the shape configuration for large images displayed in the onboarding process.</li> <li>Sets the shape configuration for small images used in the onboarding interface.</li> <li>Provides an observable property that tracks whether the user has completed the onboarding process.</li> <li>Defines the callback function to mark onboarding as completed when the user finishes the process.</li> </ol>"},{"location":"sdk/about/developer/features/#how-it-works","title":"How It Works","text":"<pre><code>OnboardingHowItWorksPageFeature {\n  images: {\n    onboardingHowItWorksItems: List&lt;{ // (6)!\n      itemPhoto: Image // (1)!\n      itemPreview: Image // (2)!\n    }&gt;\n  },\n  strings: {\n    onboardingHowItWorksPageTitle: String | null // (3)!\n    onboardingHowItWorksTitle: String // (4)!\n    onboardingHowItWorksDescription: String // (5)!\n  }\n}\n</code></pre> <ol> <li>Defines the example photo showing a person wearing the item for the try-on demonstration.</li> <li>Specifies the flatlay image of the item with a transparent background for the try-on preview.</li> <li>Sets an optional title for the \"How It Works\" page at the top of the screen.</li> <li>Defines the main title displayed below the interactive try-on demonstration section.</li> <li>Configures the descriptive text explaining how the virtual try-on feature works.</li> <li>List of exactly 3 objects, each containing images for the interactive onboarding.</li> </ol>"},{"location":"sdk/about/developer/features/#best-results","title":"Best Results","text":"<pre><code>OnboardingBestResultsPageFeature {\n  images: {\n    onboardingBestResultsGood: List&lt;Image&gt; // (1)!\n    onboardingBestResultsBad: List&lt;Image&gt; // (2)!\n  },\n  icons: {\n    onboardingBestResultsGood24: Icon // (3)!\n    onboardingBestResultsBad24: Icon // (4)!\n  },\n  strings: {\n    onboardingBestResultsPageTitle: String | null // (5)!\n    onboardingBestResultsTitle: String // (6)!\n    onboardingBestResultsDescription: String // (7)!\n  },\n  styles: {\n    reduceOnboardingBestResultsShadows: Bool // (8)!\n  }\n}\n</code></pre> <ol> <li>List of exactly 2 example photos that demonstrate optimal conditions for virtual try-on results.</li> <li>List of exactly 2 of example photos showing conditions that may lead to suboptimal try-on results.</li> <li>Icon displayed next to good example photos to indicate positive results.</li> <li>Icon displayed next to bad example photos to indicate potential issues.</li> <li>Optional title for the \"Best Results\" page at the top of the screen.</li> <li>Main title displayed above the example photos section.</li> <li>Descriptive text explaining what makes a good photo for virtual try-on.</li> <li>Controls whether to reduce shadow effects on example photos for better visibility.</li> </ol>"},{"location":"sdk/about/developer/features/#consent","title":"Consent","text":"Embedded Into OnboardingStandalone Onboarding PageStandalone Image Picker Page <pre><code>ConsentEmbeddedIntoOnboardingFeature {\n  strings: {\n    consentHtml: String // (1)!\n  }\n}\n</code></pre> <ol> <li>HTML content displayed at the bottom of the onboarding screen for embedded consent.</li> </ol> <pre><code>ConsentStandaloneOnboardingPageFeature {\n  strings: {\n    consentPageTitle: String | null // (1)!\n    consentTitle: String // (2)!\n    consentDescriptionHtml: String // (3)!\n    consentFooterHtml: String | null // (4)!\n    consentButtonAccept: String // (5)!\n  },\n  icons: {\n    consentTitle24: Icon // (6)!\n  },\n  styles: {\n    drawBordersAroundConsents: Bool // (7)!\n  },\n  data: {\n    consents: List&lt;Consent&gt; // (8)!\n  },\n  dataProvider: BuiltIn | Custom {\n    obtainedConsentsIds: Observable&lt;List&lt;string&gt;&gt; // (9)!\n    obtainConsentsIds: Callback(List&lt;string&gt;) // (10)!\n  }\n}\n</code></pre> <ol> <li>Optional title for the standalone consent page at the top of the screen.</li> <li>Main title displayed on the standalone consent page.</li> <li>HTML content describing the consent terms and conditions.</li> <li>Optional HTML footer content for additional information.</li> <li>Text label for the button that accepts the consent terms.</li> <li>Icon displayed next to the consent title in the standalone page.</li> <li>Controls whether to display borders around consent sections.</li> <li> <p>List of consent options that users must and may accept.</p> <p>See consent  scheme for more deatils</p> </li> <li> <p>Observable property tracking which consent options have been already accepted.</p> </li> <li> <p>Callback function triggered when user accepts consents.</p> <p>You should save the consent IDs that are passed and  provide them in the <code>obtainedConsentsIds</code> property for future use. If not stored, the SDK will show the consent screen again during the next Try-On session.</p> </li> </ol> <pre><code>ConsentStandaloneImagePickerPageFeature {\n  strings: {\n    consentPageTitle: String | null // (1)!\n    consentTitle: String // (2)!\n    consentDescriptionHtml: String // (3)!\n    consentFooterHtml: String | null // (4)!\n    consentButtonAccept: String // (5)!\n  },\n  icons: {\n    consentTitle24: Icon // (6)!\n  },\n  styles: {\n    drawBordersAroundConsents: Bool // (7)!\n  },\n  data: {\n    consents: List&lt;Consent&gt; // (8)!\n  },\n  dataProvider: BuiltIn | Custom {\n    obtainedConsentsIds: Observable&lt;List&lt;string&gt;&gt; // (9)!\n    obtainConsentsIds: Callback(List&lt;string&gt;) // (10)!\n  }\n}\n</code></pre> <ol> <li>Optional title for the standalone consent page at the top of the screen.</li> <li>Main title displayed on the standalone consent page.</li> <li>HTML content describing the consent terms and conditions.</li> <li>Optional HTML footer content for additional information.</li> <li>Text label for the button that accepts the consent terms.</li> <li>Icon displayed next to the consent title in the standalone page.</li> <li>Controls whether to display borders around consent sections.</li> <li> <p>List of consent options that users must and may accept.</p> <p>See consent  scheme for more deatils</p> </li> <li> <p>Observable property tracking which consent options have been already accepted.</p> </li> <li> <p>Callback function triggered when user accepts consents.</p> <p>You should save the consent IDs that are passed and  provide them in the <code>obtainedConsentsIds</code> property for future use. If not stored, the SDK will show the consent screen again during the next Try-On session.</p> </li> </ol>"},{"location":"sdk/about/developer/features/#image-picker","title":"Image Picker","text":"<pre><code>ImagePickerFeature {\n  camera: ImagePickerCameraFeature | null // (1)!\n  photoGallery: ImagePickerPhotoGalleryFeature // (2)!\n  predefinedModels: ImagePickerPredefinedModelFeature | null // (3)!\n  uploadsHistory: ImagePickerUploadsHistoryFeature | null // (4)!\n  images: {\n    examples: List&lt;Image&gt; // (5)!\n  }\n  strings: {\n    imagePickerTitleEmpty: String // (6)!\n    imagePickerDescriptionEmpty: String // (7)!\n    imagePickerButtonUploadImage: String // (8)!\n  }\n}\n</code></pre> <ol> <li> Configuration for camera functionality, allowing users to take new photos directly within the SDK.</li> <li> Configuration for accessing and selecting images from the device's photo library.</li> <li> Configuration for using predefined model images as an alternative to user photos.</li> <li> Configuration for managing and reusing previously uploaded images.</li> <li>List of exactly 2 example of input images to display in the image picker interface.</li> <li>Title text displayed above images when the image picker is empty.</li> <li>Description text shown when the image picker is empty.</li> <li>Label text for the button used to upload new photos.</li> </ol>"},{"location":"sdk/about/developer/features/#camera","title":"Camera","text":"<pre><code>ImagePickerCameraFeature {\n  icons: {\n    camera24: Icon // (1)!\n  }\n  strings: {\n    cameraButtonTakePhoto: String // (2)!\n    cameraPermissionTitle: String // (3)!\n    cameraPermissionDescription: String // (4)!\n    cameraPermissionButtonOpenSettings: String // (5)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the camera button in the bottom sheet list.</li> <li>Label text for the button used to take a photo.</li> <li>Title text displayed in the alert when camera permissions are denied.</li> <li>Description text shown in the alert when camera permissions are denied.</li> <li>Label text for the button that opens app settings to change camera permissions.</li> </ol>"},{"location":"sdk/about/developer/features/#photo-gallery","title":"Photo Gallery","text":"<pre><code>ImagePickerPhotoGalleryFeature {\n  icons: {\n    gallery24: Icon // (1)!\n  }\n  strings: {\n    galleryButtonSelectPhoto: String // (2)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the gallery button in the bottom sheet list.</li> <li>Label text for the button used to select a photo from the gallery.</li> </ol>"},{"location":"sdk/about/developer/features/#predefined-models","title":"Predefined Models","text":"<pre><code>ImagePickerPredefinedModelFeature {\n  icons: {\n    selectModels24: Icon // (1)!\n  }\n  data: {\n    preferredCategoryId: String // (2)!\n  }\n  strings: {\n    predefinedModelPageTitle: String // (3)!\n    predefinedModelOr: String // (4)!\n    predefinedModelErrorEmptyModelsList: String // (5)!\n    predefinedModelCategories: Map&lt;String: String&gt; // (6)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the predefined models button in the bottom sheet list.</li> <li>Identifier of the preferred category to show by default when user opens models page.</li> <li>Title text for the predefined models page and button in the bottom sheet list.</li> <li>Label text displayed before the predefined models button in the image picker.</li> <li>Error message shown when the list of predefined models is empty.</li> <li>Mapping of category identifiers to their display titles, typically covering <code>man</code> and <code>woman</code> categories.</li> </ol>"},{"location":"sdk/about/developer/features/#uploads-history","title":"Uploads History","text":"<pre><code>ImagePickerUploadsHistoryFeature {\n  strings: {\n    uploadsHistoryButtonNewPhoto: String // (1)!\n    uploadsHistoryTitle: String // (2)!\n    uploadsHistoryButtonChangePhoto: String // (3)!\n  }\n  styles: {\n    changePhotoButtonStyle: primary | blurred // (4)!\n  }\n  dataProvider: BuiltIn | Custom {\n    uploadedImages: Observable&lt;List&lt;InputImage&gt;&gt; // (5)!\n    addUploadedImagesAction: Callback(List&lt;InputImage&gt;) // (6)!\n    deleteUploadedImagesAction: Callback(List&lt;InputImage&gt;) // (7)!\n    selectUploadedImageAction: Callback(InputImage) // (8)!\n  }\n}\n</code></pre> <ol> <li>Text label for the button to upload a new photo.</li> <li>Title text displayed at the top of the uploads history bottom sheet.</li> <li>Text label for the button to change the currently selected photo.</li> <li>Visual style for the change photo button, either primary (solid) or blurred (with optional outline).</li> <li>Observable collection of images previously uploaded by the user, with most recent first.</li> <li>Callback to add new images to the uploads history.</li> <li>Callback to remove images from the uploads history.</li> <li>Callback to move a selected image to the top of the history when reused.</li> </ol>"},{"location":"sdk/about/developer/features/#try-on","title":"Try On","text":"<pre><code>TryOnFeature {\n  tryOn: {\n    loadingPage: TryOnLoadingPageFeature // (1)!\n    inputImageValidation: TryOnInputImageValidationFeature // (2)!\n    cart: TryOnCartFeature // (3)!\n    fitDisclaimer: TryOnFitDisclaimerFeature | null // (4)!\n    feedback: TryOnFeedbackFeature | null // (5)!\n    generationsHistory: TryOnGenerationsHistoryFeature | null // (6)!\n    otherPhoto: TryOnWithOtherPhotoFeature | null // (7)!\n    settings: {\n      isBackgroundExecutionAllowed: Bool // (8)!\n      tryGeneratePersonSegmentation: Bool // (9)!\n    }\n    icons: {\n      tryOn20: Icon // (10)!\n    }\n    strings: {\n      tryOnPageTitle: String // (11)!\n      tryOn: String // (12)!\n    }\n    styles: {\n      tryOnButtonGradient: List&lt;Color&gt; | null // (13)!\n    }\n  }\n}\n</code></pre> <ol> <li> Configuration for the loading page displayed during the TryOn process.</li> <li> Configuration for validating input images before processing.</li> <li> Configuration for cart-related functionality in the TryOn interface.</li> <li> Optional configuration for displaying fit disclaimers to users.</li> <li> Optional configuration for collecting user feedback on TryOn results.</li> <li> Optional configuration for managing the history of generated TryOn results.</li> <li> Optional configuration for allowing users to continue with a different photo.</li> <li>Determines whether the SDK should wait for the generation results in the background when closed.</li> <li>Enables local person segmentation highlighting during loading on iOS 15+.</li> <li>Icon displayed for the TryOn magic button in the interface.</li> <li>Title text displayed at the top of the TryOn page.</li> <li>Label text used for the \"Try On\" buttons throughout the interface.</li> <li>Optional gradient colors for styling the TryOn button.</li> </ol>"},{"location":"sdk/about/developer/features/#loading-page","title":"Loading Page","text":"<pre><code>TryOnLoadingPageFeature {\n  strings: {\n    tryOnLoadingStatusUploadingImage: String // (1)!\n    tryOnLoadingStatusScanningBody: String // (2)!\n    tryOnLoadingStatusGeneratingOutfit: String // (3)!\n  }\n  styles: {\n    loadingStatusBackgroundGradient: List&lt;Color&gt; | null // (4)!\n    loadingStatusStyle: primary | blurred | blurredWithOutline // (5)!\n  }\n}\n</code></pre> <ol> <li>Text displayed while uploading the user's image to the server.</li> <li>Text displayed while scanning and analyzing the body in the image.</li> <li>Text displayed while generating the virtual try-on outfit.</li> <li>Optional gradient colors for the loading status background.</li> <li>Visual style for the loading status indicator, either primary (solid) or blurred (with optional outline).</li> </ol>"},{"location":"sdk/about/developer/features/#input-image-validation","title":"Input Image Validation","text":"<pre><code>TryOnInputImageValidationFeature {\n  strings: {\n    invalidInputImageDescription: String // (1)!\n    invalidInputImageChangePhotoButton: String // (2)!\n  }\n}\n</code></pre> <ol> <li>Message displayed to users when their uploaded image fails validation.</li> <li>Label text for the button that allows users to select a different photo.</li> </ol>"},{"location":"sdk/about/developer/features/#cart","title":"Cart","text":"<pre><code>TryOnCartFeature {\n  strings: {\n    addToCart: String // (1)!\n  }\n  handler: {\n    addToCartAction: Callback(String) // (2)!\n  }\n}\n</code></pre> <ol> <li>Label text for the button that adds the current product to the cart.</li> <li>Callback function that handles adding a product to the cart using its identifier.</li> </ol>"},{"location":"sdk/about/developer/features/#fit-disclaimer","title":"Fit Disclaimer","text":"<pre><code>TryOnFitDisclaimerFeature {\n  icons: {\n    info20: Icon | null // (1)!\n  }\n  strings: {\n    fitDisclaimerTitle: String // (2)!\n    fitDisclaimerDescription: String // (3)!\n    fitDisclaimerButtonClose: String // (4)!\n  }\n}\n</code></pre> <ol> <li>Optional icon displayed in the fit disclaimer to provide visual context.</li> <li>Title text displayed in the fit disclaimer message.</li> <li>Detailed description text explaining the fit disclaimer information.</li> <li>Label text for the button that dismisses the fit disclaimer.</li> </ol>"},{"location":"sdk/about/developer/features/#feedback","title":"Feedback","text":"<pre><code>TryOnFeedbackFeature {\n  otherFeedback: TryOnFeedbackOtherFeature | null // (1)!\n  icons: {\n    like36: Icon // (2)!\n    dislike36: Icon // (3)!\n    gratitude40: Icon // (4)!\n  }\n  strings: {\n    feedbackOptions: List&lt;String&gt; // (5)!\n    feedbackTitle: String // (6)!\n    feedbackButtonSkip: String // (7)!\n    feedbackButtonSend: String // (8)!\n    feedbackGratitudeText: String // (9)!\n  }\n}\n</code></pre> <ol> <li> Optional configuration for allowing users to provide custom feedback on try-on results.</li> <li>Icon displayed for the \"Like\" feedback option.</li> <li>Icon displayed for the \"Dislike\" feedback option.</li> <li>Icon shown after feedback is submitted to express gratitude.</li> <li>List of available feedback options presented to users.</li> <li>Title text displayed in the feedback section.</li> <li>Label text for the button that allows users to skip providing feedback.</li> <li>Label text for the button that submits the user's feedback.</li> <li>Message displayed to users after they submit their feedback.</li> </ol>"},{"location":"sdk/about/developer/features/#other","title":"Other","text":"<pre><code>TryOnFeedbackOtherFeature {\n  strings: {\n    otherFeedbackTitle: String // (1)!\n    otherFeedbackButtonSend: String // (2)!\n    otherFeedbackButtonCancel: String // (3)!\n    otherFeedbackOptionOther: String // (4)!\n  }\n}\n</code></pre> <ol> <li>Title text displayed in the custom feedback section.</li> <li>Label text for the button that submits the custom feedback.</li> <li>Label text for the button that cancels the custom feedback.</li> <li>Text label for the option to provide custom feedback.</li> </ol>"},{"location":"sdk/about/developer/features/#generations-history","title":"Generations History","text":"<pre><code>TryOnGenerationsHistoryFeature {\n  icons: {\n    history24: Icon // (1)!\n  }\n  strings: {\n    generationsHistoryPageTitle: String // (2)!\n  }\n  dataProvider: BuiltIn | Custom {\n    generatedImages: Observable&lt;List&lt;GeneratedImage&gt;&gt; // (3)!\n    addGeneratedImages: Callback(List&lt;GeneratedImage&gt;) // (4)!\n    deleteGeneratedImages: Callback(List&lt;GeneratedImage&gt;) // (5)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the History button in the page bar.</li> <li>Title text displayed at the top of the generations history page.</li> <li>Observable collection of previously generated try-on images.</li> <li>Callback function to add new generated images to the history.</li> <li>Callback function to remove images from the generations history.</li> </ol>"},{"location":"sdk/about/developer/features/#other-photo","title":"Other Photo","text":"<pre><code>TryOnWithOtherPhotoFeature {\n  icons: {\n    changePhoto24: Icon // (1)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the \"Change Photo\" action, allowing users to continue with a different photo.</li> </ol>"},{"location":"sdk/about/developer/features/#share","title":"Share","text":"<pre><code>ShareFeature {\n  watermark: ShareWatermarkFeature | null // (1)!\n  icons: {\n    share24: Icon // (2)!\n  }\n  strings: {\n    shareButton: String // (3)!\n  }\n  dataProvider: null | Custom {\n    getShareText: Callback(productIds: List&lt;String&gt;) =&gt; String // (4)!\n  }\n}\n</code></pre> <ol> <li> Optional configuration for adding a watermark to shared content.</li> <li>Icon displayed for the share button in the interface.</li> <li>Label text for the share button in the fullscreen gallery.</li> <li>Optional <code>dataProvider</code> callback function that generates additional text to be shared along with the image.</li> </ol>"},{"location":"sdk/about/developer/features/#watermark","title":"Watermark","text":"<pre><code>ShareWatermarkFeature {\n  images: {\n    logo: Image // (1)!\n  }\n}\n</code></pre> <ol> <li>Logo image to be used as a watermark on shared content.</li> </ol>"},{"location":"sdk/about/developer/features/#wishlist","title":"Wishlist","text":"<pre><code>WishlistFeature {\n  icons: {\n    wishlist24: Icon // (1)!\n    wishlistFill24: Icon // (2)!\n  }\n  strings: {\n    wishlistButtonAdd: String // (3)!\n  }\n  dataProvider: {\n    wishlistProductIds: Observable&lt;List&lt;String&gt;&gt; // (4)!\n    setProductInWishlist: Callback(productId: String, inWishlist: Bool) // (5)!\n  }\n}\n</code></pre> <ol> <li>Icon displayed for the Wishlist button in its default state.</li> <li>Icon displayed for the Wishlist button when the product is in the wishlist.</li> <li>Label text for the \"Add to Wishlist\" button.</li> <li>Observable collection of product IDs currently in the wishlist.</li> <li>Callback function to add or remove a product from the wishlist.</li> </ol>"},{"location":"sdk/about/developer/platform-types/","title":"Type Definitions","text":""},{"location":"sdk/about/developer/platform-types/#callback","title":"<code>Callback</code>","text":"<p>Is a function type that can accept parameters and return a value. Additionally, on certain platforms, it might be represented as an interface with a similar method, but the underlying concept and conditions remain consistent.</p>"},{"location":"sdk/about/developer/platform-types/#observable","title":"<code>Observable</code>","text":"<p>An <code>Observable</code> is a type that can be watched by the SDK for changes. The specific implementation of an <code>Observable</code> may vary depending on the platform: it might be represented as <code>Flow</code>, <code>ValueListenable</code>, <code>Stream</code>, or the SDK will supply a custom implementation to facilitate change observation.</p>"},{"location":"sdk/about/developer/platform-types/#list","title":"<code>List</code>","text":"<p>A <code>List</code> is a collection type that holds an ordered sequence of elements. It can be represented as an <code>Array</code>, <code>List</code>, or other similar constructs.</p>"},{"location":"sdk/about/developer/platform-types/#map","title":"<code>Map</code>","text":"<p>A <code>Map</code> is a collection type that associates keys with values. It is used to store data in key-value pairs, where each key is unique. The specific implementation may vary depending on the platform, such as <code>Map</code>, <code>Dictionary</code>, or other similar constructs. </p>"},{"location":"sdk/about/developer/platform-types/#color","title":"<code>Color</code>","text":"<p>Platform-specific <code>Color</code> type or <code>#ARGB</code> <code>string</code> representation, e.g.  <code>\"#FFEF5754\"</code></p>"},{"location":"sdk/about/developer/platform-types/#icon","title":"<code>Icon</code>","text":"<p>A type used for various UI icons throughout the SDK. Icons can be used in two ways:</p> <ul> <li>As a <code>template</code> image - the SDK will automatically color it based on where it's used</li> <li>As an <code>original</code> image - used without any color changes</li> </ul> <p>Depending on the platform, if the standard type supports defining this rendering modes, it will be used. Otherwise, the SDK will supply a type to configure the rendering mode and provide the graphics resource as platform-specific <code>Image</code> type or <code>string</code> representing path to the icon resource.</p>"},{"location":"sdk/about/developer/platform-types/#image","title":"<code>Image</code>","text":"<p>Platform-specific <code>Image</code> type or <code>string</code> representing path to the image resource.</p>"},{"location":"sdk/about/developer/platform-types/#shape","title":"<code>Shape</code>","text":"<p>A type that specifies the visual appearance of UI elements, which may be as simple as a decimal number representing a corner radius. Depending on the platform and SDK implementation, it can also offer more configurations like corner curve types.</p>"},{"location":"sdk/about/developer/platform-types/#textstyle","title":"<code>TextStyle</code>","text":"<p>A type used to define text styling properties for various UI elements.</p>"},{"location":"sdk/about/developer/user-interface/","title":"User Interface Configuration Scheme","text":"<ul> <li> \u00a0 ... part of configuration page</li> </ul> <p>Configuration of the user interface presentation style, swipe-to-dismiss policy, and UI components themes for the Aiuta SDK.</p>"},{"location":"sdk/about/developer/user-interface/#user-interface","title":"User Interface","text":"<pre><code>UserInterface {\n  presentationStyle: PresentationStyle // (1)!\n  swipeToDismiss: SwipeToDismissPolicy // (2)!\n  theme: Theme // (3)!\n}\n\nenum PresentationStyle {\n  fullScreen // (4)!\n  bottomSheet // (5)!\n  pageSheet // (6)!\n}\n\nenum SwipeToDismissPolicy {\n  allowAlways // (7)!\n  allowHeaderSwipeOnly // (8)!\n  protectTheNecessaryPages // (9)!\n}\n</code></pre> <ol> <li> <p>iOS and Flutter only</p> <p>Specifies the manner in which the SDK's UI overlays the application's existing UI. This setting determines the visual presentation style, such as whether the SDK UI appears as a full-screen overlay, or covers the application with a bottom sheet.</p> </li> <li> <p>iOS only</p> <p>This property specifies the policy for dismissing the SDK's user interface through a swipe gesture. It determines how and when the swipe-to-dismiss action can be performed by the user. The policy can vary, allowing for different levels of interaction, such as always allowing a swipe to dismiss, restricting it to certain conditions, or permitting it only when swiping from specific areas of the interface.</p> </li> <li> <p> Specifies the theme configuration settings that determine the appearance and style of the UI components within the SDK. This includes defining color schemes, typography, and other visual elements to ensure a cohesive and customizable user interface experience.</p> </li> <li> <p>Presents the SDK in full-screen mode. This style occupies the entire screen, hiding the parent view completely.</p> </li> <li> <p>Opens the SDK in a bottom sheet. </p> <p>Partial iOS support</p> <p>This mode is supported on iOS from version <code>16</code> onwards. For older versions, it defaults to <code>pageSheet</code>. Unlike <code>pageSheet</code>, the parent view remains fullscreen but is covered by the sheet, rather than being stacked behind it.</p> </li> <li> <p>The SDK appears in a page sheet, which partially covers the parent view, allowing users to see some of the underlying content while interacting with the SDK. Unlike a <code>bottomSheet</code>, which keeps parent view fullscreen, a page sheet stacking the parent view behind, slightly shrinking and moving it away from the screen edges.</p> <ul> <li>This mode is recommended starting from iOS 13. For more information, refer to Best practices from Apple's HIG .</li> <li>On Android, this mode behaves as a <code>bottomSheet</code>.</li> </ul> </li> <li> <p>Allows the SDK to be dismissed at any time by swiping down anywhere on the screen.</p> <p>This policy provides the most flexibility for users, enabling them to close the SDK from any page or context.    </p> </li> <li> <p>Restricts dismissal to swiping down on the header area only.</p> <p>This policy limits the swipe-to-dismiss gesture to the header area, reducing the likelihood of accidental dismissals.</p> </li> <li> <p>Applies different swipe-to-dismiss policies based on the page context.</p> <ul> <li>On pages that are safe to close, such as onboarding or photo picker pages, the <code>allowAlways</code> policy is applied, allowing dismissal from anywhere on the screen.</li> <li>On critical pages, such as those waiting for generation or displaying results, the <code>allowHeaderSwipeOnly</code> policy is applied to prevent accidental dismissals.</li> </ul> <p>This policy provides a balance between user convenience and protecting critical workflows, ensuring that users can dismiss the SDK when appropriate while safeguarding important pages.    </p> </li> </ol>"},{"location":"sdk/about/developer/user-interface/#theme","title":"Theme","text":"<pre><code>Theme {\n  color: ColorTheme // (1)!\n  label: LabelTheme // (2)!\n  image: ImageTheme // (3)!\n  button: ButtonTheme // (4)!\n  pageBar: PageBarTheme // (5)!\n  bottomSheet: BottomSheetTheme // (6)!\n  activityIndicator: ActivityIndicatorTheme // (11)!\n  selectionSnackbar: SelectionSnackbarTheme // (7)!\n  errorSnackbar: ErrorSnackbarTheme // (8)!\n  productBar: ProductBarTheme // (9)!\n  powerBar: PowerBarTheme // (10)!\n}\n</code></pre> <ol> <li> <p> Defines the color scheme, brand colors, and various color states for UI elements.</p> <p></p> </li> <li> <p> Typography and text styling for different label types across the interface.</p> <p></p> </li> <li> <p> Shapes, sizes, and error state icon for image views.</p> <p></p> </li> <li> <p> Buttons styles, including typography and shape configurations for different button sizes.</p> <p> </p> </li> <li> <p> Navigation bar appearance, including title styling and navigation button icons.</p> <p></p> </li> <li> <p> Bottom sheet presentation, including grabber appearance and sheet shape for both main SDK and internal sheets.</p> <p></p> </li> <li> <p> Multi-selection interface for list views, including selection controls and action buttons.</p> <p></p> </li> <li> <p> Error message presentation, including error icons and retry button styling.</p> <p></p> </li> <li> <p> Product information display, including typography for product details and optional price styling.</p> <p></p> </li> <li> <p> \"Powered By Aiuta\" branding element appearance.</p> <p></p> </li> <li> <p> Appearance and customization of loading indicators.</p> <p></p> </li> </ol>"},{"location":"sdk/about/developer/user-interface/#color","title":"Color","text":"<pre><code>ColorTheme {\n  scheme: ColorScheme // (1)!\n  brand: Color // (2)!\n  primary: Color // (3)!\n  secondary: Color // (4)!\n  onDark: Color // (5)!\n  onLight: Color // (6)!\n  background: Color // (7)!\n  screen: Color // (8)!\n  neutral: Color // (9)!\n  border: Color // (10)!\n  outline: Color // (11)!\n}\n\nenum ColorScheme {\n  light // (12)!\n  dark // (13)!\n}\n</code></pre> <ol> <li> <p>Defines whether the SDK uses a light or dark theme.     Provided colors should match the scheme.</p> <p>Affects the style of blur components</p> <p>On <code>iOS only</code> it affects the appearance of system screens (e.g., photo gallery, share activity, etc.) and ensures that their <code>UIUserInterfaceStyle</code> matches the selected style. For example, if the SDK is set to a light theme but the system theme on the device is dark, the system windows invoked by the SDK will still use the light theme.</p> </li> <li> <p>Main accent color for primary actions and highlights throughout the interface.</p> <p></p> <p>Default ARGB  <code>#FF4000FF</code></p> </li> <li> <p>Primary color used for main content labels and icons, and important information.</p> <p></p> <p>Default ARGB  <code>#FF000000</code></p> </li> <li> <p>Secondary color used for supporting content and less prominent information.</p> <p></p> <p>Default ARGB  <code>#FF9F9F9F</code></p> </li> <li> <p>Preferably light color in any scheme optimized for use on dark, brand, and neutral backgrounds.</p> <p></p> <p>Default ARGB  <code>#FFFFFFFF</code></p> </li> <li> <p>Preferably dark color in any scheme optimized for use on light backgrounds.</p> <p></p> <p>Default ARGB  <code>#FF000000</code></p> </li> <li> <p>Main background color used throughout the SDK interface.</p> <p>Default ARGB  <code>#FFFFFFFF</code></p> </li> <li> <p>Zero-elevation background color.</p> <p>For the full-screen mode in the <code>dark</code> scheme, this color is used as a page background color, while bottom sheets inside the SDK will still use the <code>background</code> color. In any scheme, it will be used for full-screen image galleries.</p> <p>It's actually supposed to be black or close to black in any scheme.</p> <p>Default ARGB  <code>#FF000000</code></p> </li> <li> <p>Neutral background color used for various UI components.</p> <p>Default ARGB  <code>#FFF2F2F7</code></p> </li> <li> <p>Color used for component borders and dividers.</p> <p>Default ARGB  <code>#FFE5E5EA</code></p> </li> <li> <p>Color used for blur outlines and checkmark borders.</p> <p>Default ARGB  <code>#FFC7C7CC</code></p> </li> <li> <p>Light theme with predominantly light colors in the design.</p> </li> <li> <p>Dark theme with predominantly dark colors in the design.</p> </li> </ol>"},{"location":"sdk/about/developer/user-interface/#label","title":"Label","text":"<pre><code>LabelTheme {\n  typography: {\n    titleL: TextStyle // (1)!\n    titleM: TextStyle // (2)!\n    regular: TextStyle // (3)!\n    subtle: TextStyle // (4)!\n  }\n}\n</code></pre> <ol> <li>Defines the text style for large titles, typically used for main headings and prominent text elements.</li> <li>Specifies the text style for medium titles, commonly used for section headers and secondary headings.</li> <li>Sets the text style for regular body text and standard content throughout the interface.</li> <li>Determines the text style for subtle or less prominent text, often used for secondary information and supporting content.</li> </ol>"},{"location":"sdk/about/developer/user-interface/#image","title":"Image","text":"<pre><code>ImageTheme {\n  shapes: {\n    imageL: Shape // (1)!\n    imageS: Shape // (2)!\n  },\n  icons: {\n    imageError36: Icon // (3)!\n  }\n}\n</code></pre> <ol> <li>Defines the shape configuration for large image views, allowing customization of the visual appearance for prominent images.</li> <li>Specifies the shape configuration for small image views, enabling consistent styling for secondary or thumbnail images.</li> <li>Sets the icon to be displayed when an image fails to load, providing visual feedback for error states.</li> </ol>"},{"location":"sdk/about/developer/user-interface/#button","title":"Button","text":"<pre><code>ButtonTheme {\n  typography: {\n    buttonM: TextStyle // (1)!\n    buttonS: TextStyle // (2)!\n  },\n  shapes: {\n    buttonM: Shape // (3)!\n    buttonS: Shape // (4)!\n  }\n}\n</code></pre> <ol> <li>Defines the text style for a regular medium-sized buttons.</li> <li>Specifies the text style for small buttons.</li> <li>Sets the shape configuration for medium buttons.</li> <li>Configures the shape for small buttons.</li> </ol>"},{"location":"sdk/about/developer/user-interface/#page-bar","title":"Page Bar","text":"<pre><code>PageBarTheme {\n  typography: {\n    pageTitle: TextStyle // (1)!\n  },\n  icons: {\n    back24: Icon // (2)!\n    close24: Icon // (3)!\n  },\n  settings: {\n    preferCloseButtonOnTheRight: Bool // (4)!\n  }\n}\n</code></pre> <ol> <li>Defines the text style for page titles in the navigation bar, controlling the appearance of header text.</li> <li>Specifies the icon used for the back navigation button.</li> <li>Sets the icon for the close button.</li> <li> <p>Controls the position of the close button, determining whether it appears on the right side of the navigation bar.</p> Default \u00a0 <code>false</code><code>true</code> <p></p> <p> </p> </li> </ol>"},{"location":"sdk/about/developer/user-interface/#bottom-sheet","title":"Bottom Sheet","text":"<pre><code>BottomSheetTheme {\n  typography: {\n    iconButton: TextStyle // (1)!\n    chipsButton: TextStyle // (2)!\n  },\n  shapes: {\n    bottomSheet: Shape // (3)!\n    chipsButton: Shape // (4)!\n  },\n  grabber: {\n    width: Number // (5)!\n    height: Number // (6)!\n    topPadding: Number // (7)!\n  },\n  settings: {\n    extendDelimitersToTheRight: Bool // (8)!\n    extendDelimitersToTheLeft: Bool // (9)!\n  }\n}\n</code></pre> <ol> <li>Defines the text style for icon buttons within the bottom sheet.</li> <li>Specifies the text style for chips-style buttons in the bottom sheet interface.</li> <li>Sets the shape configuration for the bottom sheet container, controlling its visual appearance.</li> <li>Configures the shape for chips-style buttons, determining their visual style.</li> <li>Controls the width of the grabber handle used for dragging the bottom sheet.</li> <li>Determines the height of the grabber handle for bottom sheet interaction.</li> <li>Sets the vertical padding between the grabber and the top of the bottom sheet.</li> <li>Controls whether the bottom sheet delimiters extend to the right edge.</li> <li>Determines whether the bottom sheet delimiters extend to the left edge.</li> </ol>"},{"location":"sdk/about/developer/user-interface/#activity-indicator","title":"Activity Indicator","text":"<pre><code>ActivityIndicatorTheme {\n  icons: {\n    loading14: Icon | null // (1)!\n  },\n  colors: {\n    overlay: Color // (4)!\n  }\n  settings: {\n    indicationDelay: Number // (2)!\n    spinDuration: Number // (3)!\n  }\n}\n</code></pre> <ol> <li> <p>Optional icon for the activity indicator. If not provided, the system's default indicator will be used.</p> <p> <sup>System activity indicator by default</sup></p> </li> <li> <p>The time in milliseconds before the activity indicator appears. If the task completes before this delay, the indicator will not be shown. Otherwise, the indicator will appear.</p> </li> <li> <p>The duration in milliseconds for one complete rotation of the activity indicator. This setting controls how fast the indicator spins, providing a visual cue of activity progress.</p> <p>The spin duration only applies when a custom icon is used for the activity indicator. If the system's default indicator is used, this setting will be ignored and the indicator will spin with the system default speed.</p> </li> <li> <p>Overlay color used to cover any view when it needs to be locked for an activity. The activity indicator will be placed at the center of this overlay.</p> </li> </ol>"},{"location":"sdk/about/developer/user-interface/#selection","title":"Selection","text":"<pre><code>SelectionSnackbarTheme {\n  strings: {\n    select: String // (1)!\n    cancel: String // (2)!\n    selectAll: String // (3)!\n    unselectAll: String // (4)!\n  },\n  icons: {\n    trash24: Icon // (5)!\n    check20: Icon // (6)!\n  },\n  colors: {\n    selectionBackground: Color // (7)!\n  }\n}\n</code></pre> <ol> <li>Defines the text label for the select action button in the selection interface.</li> <li>Specifies the text label for the cancel action button to dismiss the selection mode.</li> <li>Sets the text label for the select all action to choose all available items.</li> <li>Configures the text label for the unselect all action to deselect all chosen items.</li> <li>Specifies the icon used for the delete action in the selection interface.</li> <li>Sets the icon displayed to indicate selected items in the interface.</li> <li>Controls the background color of the selection snackbar component.</li> </ol>"},{"location":"sdk/about/developer/user-interface/#error","title":"Error","text":"<pre><code>ErrorSnackbarTheme {\n  strings: {\n    defaultErrorMessage: String // (1)!\n    tryAgainButton: String // (2)!\n  },\n  icons: {\n    error36: Icon // (3)!\n  },\n  colors: {\n    errorBackground: Color // (4)!\n    errorPrimary: Color // (5)!\n  }\n}\n</code></pre> <ol> <li>Defines the default text message displayed when an error occurs in the interface.</li> <li>Specifies the text label for the retry action button in the error snackbar.</li> <li>Sets the icon displayed to indicate the error state in the snackbar.</li> <li>Controls the background color of the error snackbar component.</li> <li>Defines the primary color used for error-related elements in the snackbar.</li> </ol>"},{"location":"sdk/about/developer/user-interface/#product","title":"Product","text":"<pre><code>ProductBarTheme {\n  prices: ProductBarPricesTheme | null // (1)!\n  typography: {\n    product: TextStyle // (2)!\n    brand: TextStyle // (3)!\n  },\n  icons: {\n    arrow16: Icon // (4)!\n  },\n  settings: {\n    applyProductFirstImageExtraPadding: Bool // (5)!\n  }\n}\n\nProductBarPricesTheme {\n  typography: {\n    price: TextStyle // (6)!\n  },\n  colors: {\n    discountedPrice: Color // (7)!\n  }\n}\n</code></pre> <ol> <li>Configures the price display settings for the product bar, including typography and colors for price elements.</li> <li>Defines the text style for product names in the product bar.</li> <li>Specifies the text style for brand names displayed in the product bar.</li> <li>Sets the icon used to indicate expandable product details in the compact view.</li> <li>Controls whether additional padding is applied to the first product image in the list.</li> <li>Configures the text style specifically for price displays in the product bar.</li> <li>Defines the color used to highlight discounted prices in the product bar.</li> </ol>"},{"location":"sdk/about/developer/user-interface/#powered-by","title":"Powered By","text":"<pre><code>PowerBarTheme {\n  strings: {\n    poweredByAiuta: String // (1)!\n  },\n  colors: {\n    aiuta: PowerBarColorScheme // (2)!\n  }\n}\n\nenum PowerBarColorScheme {\n  standard // (3)!\n  primary // (4)!\n}\n</code></pre> <ol> <li>Defines the text label for the \"Powered By Aiuta\" branding element in the interface.</li> <li>Controls the color scheme used to highlight \"Aiuta\" in the <code>poweredByAiuta</code> label.</li> <li>Uses the default Aiuta-brand color to highlight \"Aiuta\" in the <code>poweredByAiuta</code> label, which is  <code>#FF4000FF</code></li> <li>Applies the <code>primary</code> color to the entire label without highlighting \"Aiuta\".</li> </ol>"},{"location":"sdk/about/pages/consent/","title":"Consent or Legal information","text":"<p>The Consent feature allows you to collect user permissions for data processing or simply provide the user with legal information. It can be integrated into onboarding, displayed as a standalone page, or shown in a bottom sheet when specific actions are performed.</p> Embedded legal info (default)Standalone consent page (extended)"},{"location":"sdk/about/pages/consent/#embedded","title":"Embedded","text":"<p>The legal information is displayed at the bottom of the onboarding screen. Users are not required to explicitly accept the terms to proceed.</p> <p>This is default</p>"},{"location":"sdk/about/pages/consent/#when-to-use","title":"When to Use","text":"<ul> <li>Present terms of service and/or privacy policies</li> </ul> Customization"},{"location":"sdk/about/pages/consent/#customization","title":"Customization","text":""},{"location":"sdk/about/pages/consent/#text-elements","title":"Text Elements","text":"<ul> <li><code>consentHtml</code> content with concise text and links to privacy policy and/or terms of service</li> </ul>"},{"location":"sdk/about/pages/consent/#standalone","title":"Standalone","text":"<p>A dedicated page where users must accept the terms by selecting required checkboxes to continue. It can be configured to appear:</p> <ol> <li>When users are about to upload their photo in the image picker <sup>1</sup></li> <li>As the last slide of the onboarding (if enabled)</li> <li>After the welcome screen (if enabled)</li> <li>If 2 and 3 are disabled, as the first screen when opening the SDK</li> </ol>"},{"location":"sdk/about/pages/consent/#when-to-use_1","title":"When to Use","text":"<ul> <li>Collect user permissions for data processing</li> <li>Ensure compliance with data protection regulations</li> <li>Get explicit user consent for specific features</li> <li>Present terms of service and privacy policies</li> </ul>"},{"location":"sdk/about/pages/consent/#consent-data","title":"Consent Data","text":"<p>Each consent is defined by the following properties:</p> <ul> <li><code>id</code> - A unique identifier for the consent</li> <li><code>type</code> - The method used to obtain the consent</li> <li><code>html</code> - The HTML content describing the consent</li> </ul> Consent Type <code>explicit</code><code>implicit</code> <p>Represents consent where the user must actively check a checkbox to provide permission. This is required for cases where consent must be freely given and unambiguous.</p> <ul> <li><code>required</code> - Indicates whether the checkbox must be checked to proceed</li> <li><code>optional</code> - Indicates additional consent and the user may proceed without checking it</li> </ul> <p></p> <p>GDPR Compliance</p> <p>The checkbox must be explicitly selected by the user as pre-selected checkboxes are not valid under GDPR, even if the user presses an \"Accept\" button. </p> <p>Represents consent where the user provides permission by pressing an \"Accept\" button. This may optionally include a disabled (pre-selected) checkbox for additional clarity.</p> Single consent without checkboxNecessary and additional consent with checkboxes <p></p> <p> </p> Legal Considerations <p>It can be just an \"Accept\" button, but only if it\u2019s very clear exactly what the user is consenting to at that moment and you can\u2019t bundle multiple consents into one \"Accept\" unless they\u2019re strictly necessary. For example, GDPR says marketing consent should always be separate if possible.</p> <p>This can be used only for the consent that is necessary for the service, as it\u2019s not really \u201cconsent\u201d under GDPR and it\u2019s processing based on contract necessity (Article 6(1)(b)) or legal obligation, not based on \u201cfreely given consent\u201d (Article 6(1)(a)), so, it is just informing the users, not asking them for an additional permission.</p> <p>Please consider that this option at all (with or w/o checkbox) is not valid for all cases, and it should be used with caution. Consult with a legal department if in doubt.</p>"},{"location":"sdk/about/pages/consent/#data-management","title":"Data Management","text":"Built-inData Provider <p>By default, the SDK uses platforms' local storage to store information about the consents obtained from the user. This is the simplest approach and requires no additional configuration.</p> <p>You can implement your own custom data provider that:</p> <ul> <li>Provides the <code>obtainedConsentsIds</code> list of consents identifiers already obtained from the user</li> <li>React to the <code>obtainConsentsIds</code> callback with the list of consents identifiers that the user agreed to and pressed the accept button</li> </ul> <p>This allows you to</p> <ul> <li>Integrate with your existing user management system</li> <li>Sync the consent status across devices</li> <li>Reset consent status whenever you want to show the consent screen again</li> </ul> <p>See the How to implement section at the bottom for information on the relevant platform.</p> How does the SDK decide when to request consent? <p>SDK will match the consents identifiers with the ones already obtained from the user (e.g., <code>obtainedConsentsIds</code>) and will show the consent page only if there are missing <code>explicit</code> <code>required</code> or any <code>implicit</code> consents.</p> What happens if the consent data changes? <p>Overall, the logic behind the answer to the previous question seems to be consistent:</p> <ul> <li> <p>If a new <code>explicit</code> <code>required</code> or <code>implicit</code> consent is added, the SDK will request the user's consent again, since it is not in the list of accepted consents. None of the old checkboxes will be pre-selected, and the user will need to accept all the necessary ones again.</p> </li> <li> <p>A new <code>optional</code> consent will be ignored so as not to disturb users who have already accepted the mandatory ones.</p> </li> <li> <p>If any of the mandatory ones have changed their terms... Well, that's bad practice, please don't do that. The SDK does not monitor the content of consents, only their identifiers. If you need to change the terms, delete the old consent and create a new one with a different <code>id</code>.</p> </li> <li> <p>When changing the consent <code>type</code>, the logic is preserved. If it becomes <code>optional</code>, no reaction will follow. If an <code>optional</code> consent becomes any of mandatory type, the SDK will request everything again.</p> </li> </ul> Customization"},{"location":"sdk/about/pages/consent/#customization_1","title":"Customization","text":""},{"location":"sdk/about/pages/consent/#text-elements_1","title":"Text Elements","text":"<ul> <li>Optional <code>consentPageTitle</code></li> <li>Main <code>consentTitle</code> displayed on the top</li> <li><code>consentDescriptionHtml</code> content above the consents list</li> <li>Optional <code>consentFooterHtml</code> below the consents list</li> <li>Text for the <code>consentButtonAccept</code></li> </ul>"},{"location":"sdk/about/pages/consent/#styles","title":"Styles","text":"<ul> <li>Optional <code>drawBordersAroundConsents</code></li> </ul> Without bordersWith borders"},{"location":"sdk/about/pages/consent/#analytics","title":"Analytics","text":"<p>The following analytics events may be tracked during consent collection:</p> Type Event Page Id Description <code>page</code> <code>consent</code> Consent page opened <code>onboarding</code> <code>consentsGiven</code> <code>consent</code> User has given all required consents <code>exit</code> <code>consent</code> SDK was closed on the consent page"},{"location":"sdk/about/pages/consent/#how-to-implement","title":"How to implement","text":"<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul> <ol> <li> <p>We recommend using the consent display via the \"upload photo\" button if you are using try-ons with models feature. In this case, the user has the option not to use personal photos and there is no need to request consent in advance, as the service has the right to operate without it.\u00a0\u21a9</p> </li> </ol>"},{"location":"sdk/about/pages/image-picker/","title":"Image Picker","text":"<p>The Image Picker feature represents the main page and allows users to select images for virtual try-on from various sources.</p>"},{"location":"sdk/about/pages/image-picker/#when-to-use","title":"When to Use","text":"<ul> <li>Let users select photos from their device</li> <li>Allow users to take new photos with the camera</li> <li> Provide predefined models images for try-on</li> <li>Enable users to reuse and manage previous images</li> </ul>"},{"location":"sdk/about/pages/image-picker/#sources","title":"Sources","text":"CameraGalleryPredefined ModelsUploads History"},{"location":"sdk/about/pages/image-picker/#camera","title":"Camera","text":"<p>Allows users to take new photos using their device's camera.Uses the platform's standard camera tools for applications.</p> Customization"},{"location":"sdk/about/pages/image-picker/#customization","title":"Customization","text":""},{"location":"sdk/about/pages/image-picker/#icons","title":"Icons","text":"<ul> <li><code>camera24</code> - Icon for the camera button in the bottom sheet list</li> </ul>"},{"location":"sdk/about/pages/image-picker/#text-elements","title":"Text Elements","text":"<ul> <li><code>cameraButtonTakePhoto</code> - Label for the button used to take a photo</li> <li><code>cameraPermissionTitle</code> - Title for the camera permission alert</li> <li><code>cameraPermissionDescription</code> - Description for the camera permission alert</li> <li><code>cameraPermissionButtonOpenSettings</code> - Label for the button that opens app settings</li> </ul>"},{"location":"sdk/about/pages/image-picker/#photo-library","title":"Photo library","text":"<p>Enables users to select photos from their device's photo library.Uses the platform's standard photo picker.</p> Customization"},{"location":"sdk/about/pages/image-picker/#customization_1","title":"Customization","text":""},{"location":"sdk/about/pages/image-picker/#icons_1","title":"Icons","text":"<ul> <li><code>gallery24</code> - Icon for the gallery button in the bottom sheet list</li> </ul>"},{"location":"sdk/about/pages/image-picker/#text-elements_1","title":"Text Elements","text":"<ul> <li><code>galleryButtonSelectPhoto</code> - Label for the button used to select a photo</li> </ul>"},{"location":"sdk/about/pages/image-picker/#predefined-models","title":"Predefined Models","text":"Enabled (default)Disabled <p>Provides a selection of predefined models images for virtual try-on. Models are divided into categories, each containing a set of model images with different body shapes. This allows users to select models that best match their preferences and needs, offering a personalized virtual try-on experience, while allowing them not to use their own photos.</p> <p></p>"},{"location":"sdk/about/pages/image-picker/#models-data","title":"Models data","text":"<p>The SDK gets categories and the corresponding model lists from the Aiuta backend. Apps don't need to provide any data for this.</p> <p>By default, there two categories: <code>woman</code> and <code>man</code> in that order. If necessary, categories can be fully customized in agreement with Aiuta.</p> Predefined models, History and User data <p>If you use your own history <code>data provider</code> and manage image files when they are added to or deleted from the user's history, please note:</p> <ul> <li>The link to the image used with the model can be saved in the user's history</li> <li>The file with the model image should not be moved to the user's storage, it is a shared file and does not belong to a specific user</li> <li>When deleting from the user's history, the link to the image must be deleted, but the file with the model image itself cannot be deleted</li> </ul> Customization"},{"location":"sdk/about/pages/image-picker/#customization_2","title":"Customization","text":""},{"location":"sdk/about/pages/image-picker/#icons_2","title":"Icons","text":"<ul> <li><code>selectModels24</code> - Icon for the predefined models button</li> </ul>"},{"location":"sdk/about/pages/image-picker/#text-elements_2","title":"Text Elements","text":"<ul> <li><code>predefinedModelsTitle</code> - Title of the predefined models page and button</li> <li><code>predefinedModelsOr</code> - Label displayed before the predefined models button</li> <li><code>predefinedModelsEmptyListError</code> - Error message for empty model list</li> <li><code>predefinedModelsCategories</code> - Mapping of category IDs to titles (e.g., \"man\", \"woman\")</li> </ul>"},{"location":"sdk/about/pages/image-picker/#uploads-history","title":"Uploads History","text":"<p>Allows users to access and reuse their previously used images. The last image used will be preselected in the image picker for subsequent try-ons.</p>"},{"location":"sdk/about/pages/image-picker/#history-data","title":"History Data","text":"<p>Each image in the history is defined by the following properties:</p> <ul> <li><code>id</code> - A unique identifier for the image</li> <li><code>url</code> - The address of an image resource</li> <li><code>type</code> - The type of the image. </li> </ul> Image Type <p>Is this context of images used as input it is:</p> <code>uploaded</code><code>inputModel</code> <p>Image uploaded by the user (taken from the camera or gallery). This image belongs to the user. When the user removes the image from the history, it should be deleted from the storage as well.</p> <p>Image of the model, provided by the Aiuta. This image could be linked to the user history, but it is not owned by the user, and should not be deleted, only unlinked from the user's history in case of removing.</p>"},{"location":"sdk/about/pages/image-picker/#data-management","title":"Data Management","text":"Built-inData Provider <p>By default, the SDK uses platforms' local storage to store the history. This is the simplest approach and requires no additional configuration.</p> <p>Anonymous data</p> <p>Neither the SDK nor the Aiuta API have any information about your users; all uploaded images are completely anonymous and are not linked to any user. Data in the history is stored locally on the device and may be lost when the app is reinstalled.</p> <p>If you need to link images to a user profile, use Data Provider instead.</p> <p>You can implement your own custom history data provider that:</p> <ul> <li>Provides the <code>uploadedImages</code> list of images previously used by the user</li> <li>Reacts to the <code>addUploadedImages</code> callback to store new images</li> <li>Reacts to the <code>deleteUploadedImages</code> callback to remove images by the user choise</li> <li>Reacts to the <code>selectUploadedImage</code> callback to reorder images when reused</li> </ul> <p>This allows you to</p> <ul> <li>Integrate with your existing user management system</li> <li>Sync the uploads history across devices</li> <li>Implement custom business logic for history management</li> <li>Control how images are stored and accessed</li> </ul> Customization"},{"location":"sdk/about/pages/image-picker/#customization_3","title":"Customization","text":""},{"location":"sdk/about/pages/image-picker/#text-elements_3","title":"Text Elements","text":"<ul> <li><code>uploadsHistoryButtonNewPhoto</code> - Text for the new photo button</li> <li><code>uploadsHistoryTitle</code> - Title for the uploads history screen</li> <li><code>uploadsHistoryButtonChangePhoto</code> - Text for the change photo button</li> </ul>"},{"location":"sdk/about/pages/image-picker/#styles","title":"Styles","text":"<ul> <li><code>changePhotoButtonStyle</code> - Style for the \"Change Photo\" button:<ul> <li><code>blurred</code> - Default blurred style with optional outline</li> <li><code>primary</code> - Solid button with primary background color</li> </ul> </li> </ul>"},{"location":"sdk/about/pages/image-picker/#analytics","title":"Analytics","text":"<p>The following analytics events are tracked during image selection:</p> Type Event Page Id Description <code>page</code> <code>imagePicker</code> Image picker page opened <code>picker</code> <code>cameraOpened</code> <code>imagePicker</code> Camera interface opened <code>picker</code> <code>newPhotoTaken</code> <code>imagePicker</code> New photo taken with camera <code>picker</code> <code>photoGalleryOpened</code> <code>imagePicker</code> Photo gallery opened <code>picker</code> <code>galleryPhotoSelected</code> <code>imagePicker</code> Photo selected from gallery <code>picker</code> <code>uploadsHistoryOpened</code> <code>imagePicker</code> Uploads history opened <code>picker</code> <code>uploadedPhotoSelected</code> <code>imagePicker</code> Previously used photo selected <code>picker</code> <code>uploadedPhotoDeleted</code> <code>imagePicker</code> Previously used photo deleted <code>picker</code> <code>predefinedModelsOpened</code> <code>imagePicker</code> Predefined models list opened <code>picker</code> <code>predefinedModelSelected</code> <code>imagePicker</code> Predefined model selected <code>exit</code> <code>imagePicker</code> SDK was closed on the image picker page"},{"location":"sdk/about/pages/image-picker/#how-to-implement","title":"How to implement","text":"<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"},{"location":"sdk/about/pages/loading-screen/","title":"Loading Screen","text":"<p>The Loading Screen is displayed during the virtual try-on process to keep users informed about the current status of their request. It shows different status messages as the system processes the image and generates the try-on result:</p> <ol> <li>Uploading Image - When the user's photo is being uploaded</li> <li>Scanning Body - While the system analyzes the body in the image</li> <li>Generating Outfit - During the final try-on generation</li> </ol> Customization"},{"location":"sdk/about/pages/loading-screen/#customization","title":"Customization","text":""},{"location":"sdk/about/pages/loading-screen/#text-elements","title":"Text Elements","text":"<ul> <li>Text for <code>tryOnLoadingStatusUploadingImage</code> state</li> <li>Text for <code>tryOnLoadingStatusScanningBody</code> state</li> <li>Text for <code>tryOnLoadingStatusGeneratingOutfit</code> state</li> </ul>"},{"location":"sdk/about/pages/loading-screen/#icons","title":"Icons","text":"<ul> <li>Optional <code>loading14</code> icon for the loading status</li> </ul> <p>If no custom icon is provided</p> <p>SDK will draw system default activity indicator</p>"},{"location":"sdk/about/pages/loading-screen/#styles","title":"Styles","text":"<ul> <li><code>backgroundGradient</code> for the loading animation</li> <li><code>statusStyle</code> appearance:<ul> <li><code>blurred</code> - Default blurred style with optional outline</li> <li><code>primary</code> - Solid button with primary background color</li> </ul> </li> </ul>"},{"location":"sdk/about/pages/loading-screen/#error-handling","title":"Error handling","text":"Invalid input imageOther errors"},{"location":"sdk/about/pages/loading-screen/#invalid-input-image","title":"Invalid Input Image","text":"<p>When the system detects that the uploaded image doesn't meet the requirements for virtual try-on (e.g., no person detected), it displays an error message with an option to try again with a different photo.</p> Customization"},{"location":"sdk/about/pages/loading-screen/#customization_1","title":"Customization","text":""},{"location":"sdk/about/pages/loading-screen/#text-elements_1","title":"Text Elements","text":"<ul> <li><code>invalidInputImageDescription</code> message for the alert</li> <li>Label for the <code>invalidInputImageChangePhotoButton</code></li> </ul>"},{"location":"sdk/about/pages/loading-screen/#other-errors","title":"Other Errors","text":"<p>When other errors occur during the try-on process (such as network issues or server errors), the SDK displays an error snackbar with a message and retry option.</p> Customization"},{"location":"sdk/about/pages/loading-screen/#customization_2","title":"Customization","text":""},{"location":"sdk/about/pages/loading-screen/#text-elements_2","title":"Text Elements","text":"<ul> <li><code>defaultErrorMessage</code> displayed in the snackbar</li> <li>Label for the <code>tryAgainButton</code></li> </ul>"},{"location":"sdk/about/pages/loading-screen/#icons_1","title":"Icons","text":"<ul> <li><code>error36</code> icon in the snackbar</li> </ul>"},{"location":"sdk/about/pages/loading-screen/#colors","title":"Colors","text":"<ul> <li><code>errorBackground</code> color for the snackbar</li> <li><code>errorPrimary</code> color for text and interactive elements</li> </ul>"},{"location":"sdk/about/pages/loading-screen/#analytics","title":"Analytics","text":"<p>The following analytics events may be tracked during the loading process:</p> Type Event Page Id Description <code>page</code> <code>loading</code> Loading screen opened <code>tryOn</code> <code>photoUploaded</code> <code>loading</code> Successful upload of a selected or captured photo for processing <code>tryOn</code> <code>tryOnStarted</code> <code>loading</code> Initiation of the virtual try-on processwith the selected image <code>tryOn</code> <code>tryOnFinished</code> <code>loading</code> Successful completion of the virtual try-onprocess with generated results <code>tryOn</code> <code>tryOnAborted</code> <code>loading</code> Try-on process was aborted by the Aiutabackend due to an invalid input image <code>tryOn</code> <code>tryOnError</code> <code>loading</code> Occurrence of an error during the try-on process <code>exit</code> <code>loading</code> SDK was closed on the loading screen"},{"location":"sdk/about/pages/loading-screen/#how-to-implement","title":"How to implement","text":"<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"},{"location":"sdk/about/pages/onboarding/","title":"Onboarding","text":"<p>The Onboarding feature guides users through the SDK's functionality, helping them understand how to use the virtual try-on experience effectively.</p>"},{"location":"sdk/about/pages/onboarding/#when-to-use","title":"When to Use","text":"<ul> <li>Show onboarding when users first interact with the SDK</li> <li>Use it to explain the virtual try-on process</li> </ul> <p>Behavior</p> <p>The Onboarding is displayed repeatedly until the user completes it. After completion, it won't be shown again unless the completion status reset.</p>"},{"location":"sdk/about/pages/onboarding/#data-management","title":"Data Management","text":"<p>The SDK provides two options for managing the onboarding completion status:</p> Built-inData Provider <p>By default, the SDK uses platforms' local storage to store the onboarding completion status. This is the simplest approach and requires no additional configuration.</p> <p>You can implement your own custom data provider that:</p> <ul> <li>Provides the <code>isOnboardingCompleted</code> status whether the user has completed the onboarding process</li> <li>React to the <code>completeOnboarding</code> callback to mark the onboarding as completed</li> </ul> <p>This allows you to</p> <ul> <li>Integrate with your existing user management system</li> <li>Sync the status across devices</li> <li>Reset <code>isOnboardingCompleted</code> whenever you want to show the onboarding again</li> </ul> Customization"},{"location":"sdk/about/pages/onboarding/#customization","title":"Customization","text":""},{"location":"sdk/about/pages/onboarding/#text-elements","title":"Text Elements","text":"<ul> <li>Text for the <code>onboardingButtonNext</code></li> <li>Text for the <code>onboardingButtonStart</code></li> </ul>"},{"location":"sdk/about/pages/onboarding/#typography","title":"Typography","text":"<ul> <li>General <code>buttonM</code> text style for Next/Start button</li> </ul>"},{"location":"sdk/about/pages/onboarding/#shapes","title":"Shapes","text":"<ul> <li>General <code>buttonM</code> shape for Next/Start button</li> </ul>"},{"location":"sdk/about/pages/onboarding/#colors","title":"Colors","text":"<ul> <li>General <code>brand</code> color for Next/Start button background</li> <li>General <code>onDark</code> color for button label</li> </ul>"},{"location":"sdk/about/pages/onboarding/#styles","title":"Styles","text":"<ul> <li>Toogle <code>preferCloseButtonOnTheRight</code> to reverse pageBar</li> </ul>"},{"location":"sdk/about/pages/onboarding/#slides","title":"Slides","text":"How It Works (Interactive)Best Results (Deprecated)Consent (Optional)"},{"location":"sdk/about/pages/onboarding/#how-it-works","title":"How It Works","text":"<p>The \"How It Works\" page provides an interactive demonstration of the virtual try-on feature:</p> <ul> <li>Shows 3 example images of the same person in the same pose</li> <li>Each example includes both the person's photo and the item preview</li> <li>Demonstrates the transformation process</li> </ul> <p>Default</p> <p>By default, this is the only slide of the onboarding with embedded terms of service instead of a separate consent</p> Customization"},{"location":"sdk/about/pages/onboarding/#customization_1","title":"Customization","text":""},{"location":"sdk/about/pages/onboarding/#images","title":"Images","text":"<ul> <li>List of 3 <code>onboardingHowItWorksItems</code>, each containing:<ul> <li>Flatlay <code>itemPreview</code> image of the item for try-on with transparent background</li> <li>Example <code>itemPhoto</code> image of the try-on result with the person wearing this item</li> </ul> </li> </ul>"},{"location":"sdk/about/pages/onboarding/#text-elements_1","title":"Text Elements","text":"<ul> <li>Optional <code>onboardingHowItWorksPageTitle</code></li> <li><code>onboardingHowItWorksTitle</code> displayed below the interactive section</li> <li><code>onboardingHowItWorksDescription</code> explaining how the try-on feature works</li> </ul>"},{"location":"sdk/about/pages/onboarding/#typography_1","title":"Typography","text":"<ul> <li>General <code>titleL</code> text style for the title</li> <li>General <code>regular</code> text style for the description text</li> </ul>"},{"location":"sdk/about/pages/onboarding/#colors_1","title":"Colors","text":"<ul> <li>General <code>primary</code> color for title and description</li> </ul>"},{"location":"sdk/about/pages/onboarding/#shapes_1","title":"Shapes","text":"<ul> <li><code>onboardingImageL</code> shape for large image views</li> <li><code>onboardingImageS</code> shape for small image views</li> </ul>"},{"location":"sdk/about/pages/onboarding/#best-results","title":"Best Results","text":"<p>The \"Best Results\" page helps users achieve optimal results:</p> <ul> <li>Shows 2 good examples and 2 bad examples of input images</li> <li>Provides guidance on photo requirements</li> </ul> <p>Why is it deprecated?</p> <p>Examples of good source photos are now included into the Image Picker, so we recommend disabling this slide to avoid overwhelming the user with onboarding</p> Customization"},{"location":"sdk/about/pages/onboarding/#customization_2","title":"Customization","text":""},{"location":"sdk/about/pages/onboarding/#images_1","title":"Images","text":"<ul> <li>List of 2 <code>onboardingBestResultsGood</code> images representing good examples</li> <li>List of 2 <code>onboardingBestResultsBad</code>images representing bad examples</li> </ul>"},{"location":"sdk/about/pages/onboarding/#icons","title":"Icons","text":"<ul> <li><code>onboardingBestResultsGood24</code> icon for good examples badge</li> <li><code>onboardingBestResultsBad24</code> icon for bad examples badge</li> </ul>"},{"location":"sdk/about/pages/onboarding/#text-elements_2","title":"Text Elements","text":"<ul> <li>Optional <code>onboardingBestResultsPageTitle</code></li> <li><code>onboardingBestResultsTitle</code> displayed below the best results samples</li> <li><code>onboardingBestResultsDescription</code> explaining how to achieve the best results</li> </ul>"},{"location":"sdk/about/pages/onboarding/#typography_2","title":"Typography","text":"<ul> <li>General <code>titleL</code> text style for the title</li> <li>General <code>regular</code> text style for the description text</li> </ul>"},{"location":"sdk/about/pages/onboarding/#colors_2","title":"Colors","text":"<ul> <li>General <code>primary</code> color for title and description</li> </ul>"},{"location":"sdk/about/pages/onboarding/#shapes_2","title":"Shapes","text":"<ul> <li><code>onboardingImageS</code> shape for example image views</li> </ul>"},{"location":"sdk/about/pages/onboarding/#styles_1","title":"Styles","text":"<ul> <li>Toggle to <code>reduceOnboardingBestResultsShadows</code> on the page</li> </ul>"},{"location":"sdk/about/pages/onboarding/#consent","title":"Consent","text":"<p>The Consent page can be integrated into the onboarding flow as a slide to collect user permissions for data processing. This slide explains the terms of service and/or privacy policies to users. For detailed information about configuring the Consent screen, including customization options and implementation details, please refer to the  Consent page.</p>"},{"location":"sdk/about/pages/onboarding/#analytics","title":"Analytics","text":"<p>The following analytics events may be tracked during onboarding:</p> Type Event Page Id Description <code>page</code> <code>howItWorks</code><code>bestResults</code><code>consent</code> How It Works slide openedBest Results slide openedConsent slide opened <code>onboarding</code> <code>onboardingFinished</code> <code>howItWorks</code><code>bestResults</code><code>consent</code> Completion of all onboarding steps onthe last slide according to the configuration <code>onboarding</code> <code>consentsGiven</code> <code>consent</code> Refer to the  Consent page <code>exit</code> <code>howItWorks</code><code>bestResults</code><code>consent</code> SDK was closed on one of the onboarding slides"},{"location":"sdk/about/pages/onboarding/#how-to-implement","title":"How to implement","text":"<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"},{"location":"sdk/about/pages/results-screen/","title":"Results Screen","text":"<p>The Results Screen displays the generated virtual try-on results and provides various interaction options for users to engage with the results, such as:</p> <ul> <li>Allow users to interact with the results</li> <li>Collect user feedback on the try-on quality</li> <li>Enable users to continue with different photos</li> <li>Store the generation history</li> </ul>"},{"location":"sdk/about/pages/results-screen/#features","title":"Features","text":"CartWishlistFeedbackContinueHistoryDisclaimer Survey with quick feedback optionsOther (custom user comment)"},{"location":"sdk/about/pages/results-screen/#cart-integration","title":"Cart Integration","text":"<p>Allows users to add products from the try-on results directly to their shopping cart.</p>"},{"location":"sdk/about/pages/results-screen/#handling","title":"Handling","text":"<ul> <li>You need to handle the <code>addToCart</code> action that the SDK will trigger when a user wants to add a product to their cart; SDK will close right after that, allowing you to present your own UI for product customization, such as size selection or other options needed for cart addition</li> <li>The SDK will provide the product ID of the item the user wants to add</li> </ul> Customization"},{"location":"sdk/about/pages/results-screen/#customization","title":"Customization","text":""},{"location":"sdk/about/pages/results-screen/#text-elements","title":"Text Elements","text":"<ul> <li><code>addToCart</code> - Label for the \"Add to Cart\" button</li> </ul>"},{"location":"sdk/about/pages/results-screen/#wishlist-integration","title":"Wishlist Integration","text":"<p>Allows users to add products from the try-on results to their wishlist for later consideration.</p> <p>Integration benefits</p> <ul> <li>Seamless integration with your existing wishlist functionality</li> <li>Consistent user experience across your app</li> <li>Real-time wishlist status updates</li> </ul>"},{"location":"sdk/about/pages/results-screen/#data-management","title":"Data Management","text":"<p>You need to implement a data provider that:</p> <ul> <li>Provides the <code>wishlistProductIds</code> list of product IDs currently in the wishlist</li> <li>Handles the <code>setProductInWishlist</code> callback to add or remove products from the wishlist</li> </ul> <p>Data privacy</p> <p>You don't need to provide the user's complete wishlist. You can filter to include only products related to the current try-on session, or provide the full wishlist - it's up to you. The SDK only uses this data to correctly display the wishlist status for products and doesn't collect or use this information for any other purpose.</p> Customization"},{"location":"sdk/about/pages/results-screen/#customization_1","title":"Customization","text":""},{"location":"sdk/about/pages/results-screen/#text-elements_1","title":"Text Elements","text":"<ul> <li><code>wishlistButtonAdd</code> - Label for the \"Add to Wishlist\" button</li> </ul>"},{"location":"sdk/about/pages/results-screen/#icons","title":"Icons","text":"<ul> <li><code>wishlist24</code> - Icon for the wishlist button in normal state</li> <li><code>wishlistFill24</code> - Icon for the wishlist button when product is in wishlist</li> </ul>"},{"location":"sdk/about/pages/results-screen/#feedback","title":"Feedback","text":"<p>Enables users to provide feedback on the try-on results quality.</p> Customization"},{"location":"sdk/about/pages/results-screen/#customization_2","title":"Customization","text":""},{"location":"sdk/about/pages/results-screen/#text-elements_2","title":"Text Elements","text":"<ul> <li><code>feedbackTitle</code> - Title displayed in the feedback section</li> <li><code>feedbackOptions</code> - List of feedback options available to users</li> <li><code>feedbackButtonSkip</code> - Label for the \"Skip\" button</li> <li><code>feedbackButtonSend</code> - Label for the \"Send\" button</li> <li><code>feedbackGratitudeText</code> - Text displayed after feedback is sent</li> </ul>"},{"location":"sdk/about/pages/results-screen/#icons_1","title":"Icons","text":"<ul> <li><code>like36</code> - Icon for the \"Like\" feedback option</li> <li><code>dislike36</code> - Icon for the \"Dislike\" feedback option</li> <li><code>gratitude40</code> - Icon displayed after feedback is sent</li> </ul>"},{"location":"sdk/about/pages/results-screen/#shapes","title":"Shapes","text":"<ul> <li><code>feedbackButton</code> - Shape for feedback buttons</li> </ul>"},{"location":"sdk/about/pages/results-screen/#other-feedback","title":"Other Feedback","text":"<p>Enables users to provide custom comment on the try-on results quality.</p> Customization"},{"location":"sdk/about/pages/results-screen/#customization_3","title":"Customization","text":""},{"location":"sdk/about/pages/results-screen/#text-elements_3","title":"Text Elements","text":"<ul> <li><code>feedbackOptionOther</code> - Label for the \"Other\" feedback option in the survey</li> <li><code>otherFeedbackTitle</code> - Title for the \"Other\" feedback</li> <li><code>otherFeedbackButtonSend</code> - Label for the \"Send\" button</li> <li><code>otherFeedbackButtonCancel</code> - Label for the \"Cancel\" button             </li> </ul>"},{"location":"sdk/about/pages/results-screen/#continue-with-other-photo","title":"Continue with Other Photo","text":"<p>Allows users to start a new try-on with a different photo.</p> Customization"},{"location":"sdk/about/pages/results-screen/#customization_4","title":"Customization","text":""},{"location":"sdk/about/pages/results-screen/#icons_2","title":"Icons","text":"<ul> <li><code>changePhoto24</code> - Icon for the \"Change Photo\" action</li> </ul>"},{"location":"sdk/about/pages/results-screen/#generation-history","title":"Generation History","text":"<p>Provides access to previously generated try-on results.</p> Customization"},{"location":"sdk/about/pages/results-screen/#customization_5","title":"Customization","text":""},{"location":"sdk/about/pages/results-screen/#text-elements_4","title":"Text Elements","text":"<ul> <li><code>generationsHistoryPageTitle</code> - Title displayed on the generations history page</li> </ul>"},{"location":"sdk/about/pages/results-screen/#icons_3","title":"Icons","text":"<ul> <li><code>history24</code> - Icon for the History button in the page bar</li> </ul>"},{"location":"sdk/about/pages/results-screen/#data-management_1","title":"Data Management","text":"Built-inData Provider <p>By default, the SDK uses platforms' local storage to store the history. This is the simplest approach and requires no additional configuration.</p> <p>Anonymous data</p> <p>Neither the SDK nor the Aiuta API have any information about your users; all generated images are completely anonymous and are not linked to any user. Data in the history is stored locally on the device and may be lost when the app is reinstalled.</p> <p>If you need to link images to a user profile, use Data Provider instead.</p> <p>You can implement your own custom data provider that:</p> <ul> <li>Provides the <code>generated</code> list of images previously generated for the user</li> <li>React to the <code>add(generated:for:)</code> callback to store new generated images</li> <li>React to the <code>delete(generated:)</code> callback to remove images by the user choice</li> </ul> <p>This allows you to</p> <ul> <li>Integrate with your existing user management system</li> <li>Sync the generations history across devices</li> <li>Implement custom business logic for history management</li> <li>Control how generated images are stored and accessed</li> </ul>"},{"location":"sdk/about/pages/results-screen/#fit-disclaimer","title":"Fit Disclaimer","text":"<p>Displays important information about the virtual try-on fit.</p> Customization"},{"location":"sdk/about/pages/results-screen/#customization_6","title":"Customization","text":""},{"location":"sdk/about/pages/results-screen/#text-elements_5","title":"Text Elements","text":"<ul> <li><code>fitDisclaimerTitle</code> - Title displayed in the fit disclaimer</li> <li><code>fitDisclaimerDescription</code> - Description text in the fit disclaimer</li> <li><code>fitDisclaimerCloseButton</code> - Label for the close button</li> </ul>"},{"location":"sdk/about/pages/results-screen/#typography","title":"Typography","text":"<ul> <li><code>disclaimer</code> - Text style for the disclaimer</li> </ul>"},{"location":"sdk/about/pages/results-screen/#icons_4","title":"Icons","text":"<ul> <li><code>info20</code> - Icon displayed in the fit disclaimer</li> </ul>"},{"location":"sdk/about/pages/results-screen/#analytics","title":"Analytics","text":"<p>The following analytics events may be tracked during results interaction:</p> Type Event Page Id Description <code>page</code> <code>results</code> Results screen opened <code>results</code> <code>resultShared</code> <code>results</code> Try-on result was shared <code>results</code> <code>productAddToWishlist</code> <code>results</code> Product was added to wishlist <code>results</code> <code>productAddToCart</code> <code>results</code> Product was added to cart <code>results</code> <code>pickOtherPhoto</code> <code>results</code> User requested to try with different photo <code>feedback</code> <code>positive</code> <code>results</code> User provided positive feedback <code>feedback</code> <code>negative</code> <code>results</code> User provided negative feedback <code>exit</code> <code>results</code> SDK was closed on the results screen"},{"location":"sdk/about/pages/results-screen/#how-to-implement","title":"How to implement","text":"<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"},{"location":"sdk/about/pages/welcome-screen/","title":"Welcome Screen","text":"<p>The Welcome Screen is an optional feature that can be displayed when users first open the SDK. It serves as an introduction to your virtual try-on experience and can be customized to match your brand identity.</p>"},{"location":"sdk/about/pages/welcome-screen/#when-to-use","title":"When to Use","text":"<ul> <li>Show the welcome screen on the first launch of the SDK</li> <li>Use it to introduce users to the virtual try-on experience</li> <li>Set the tone for the user journey</li> </ul> <p>Behavior</p> <p>The Welcome Screen is displayed only if the user has not completed the Onboarding. Thus, it is bound to the Onboarding feature. If the Onboarding is not provided, the Welcome Screen will be displayed every time the SDK is opened and you should care of enabling or disabling the Welcome Screen feature in the configuration to control the Welcome Screen visibility yourself.</p> Customization"},{"location":"sdk/about/pages/welcome-screen/#customization","title":"Customization","text":""},{"location":"sdk/about/pages/welcome-screen/#images","title":"Images","text":"<ul> <li>Custom <code>welcomeBackground</code> image that fills the entire screen</li> </ul> <p>Make sure image itself is dimmed to be contrast enough with <code>onDark</code> color</p>"},{"location":"sdk/about/pages/welcome-screen/#icons","title":"Icons","text":"<ul> <li>Custom central <code>welcome82</code> icon displayed above the title (82x82 points)</li> <li>General <code>close24</code> icon for close button</li> </ul>"},{"location":"sdk/about/pages/welcome-screen/#text-elements","title":"Text Elements","text":"<ul> <li>Main <code>welcomeTitle</code> heading that introduces the feature</li> <li>Supporting <code>welcomeDescription</code> explaining the virtual try-on experience</li> <li>Call-to-action <code>welcomeButtonStart</code> to begin the experience</li> </ul>"},{"location":"sdk/about/pages/welcome-screen/#typography","title":"Typography","text":"<ul> <li>Custom <code>welcomeTitle</code> text style for the title</li> <li>Custom <code>welcomeDescription</code> text style for the description text</li> <li>General <code>buttonM</code> text style for the start button</li> </ul>"},{"location":"sdk/about/pages/welcome-screen/#shapes","title":"Shapes","text":"<ul> <li>General <code>buttonM</code> shape of start button</li> </ul>"},{"location":"sdk/about/pages/welcome-screen/#colors","title":"Colors","text":"<ul> <li>General <code>onDark</code> color for close button, title, description and start button background</li> <li>General <code>onLight</code> color for start button label</li> </ul>"},{"location":"sdk/about/pages/welcome-screen/#analytics","title":"Analytics","text":"<p>The following analytics events are tracked on the Welcome Screen:</p> Type Event Page Id Description <code>page</code> <code>welcome</code> Triggered when the welcome screen is displayed <code>onboarding</code> <code>welcomeStartClicked</code> <code>welcome</code> Triggered when user clicks the start buttonto start the journey <code>exit</code> <code>welcome</code> SDK was closed on the welcome screen"},{"location":"sdk/about/pages/welcome-screen/#how-to-implement","title":"How to implement","text":"<ul> <li> Android</li> <li> iOS</li> <li> Flutter</li> </ul>"},{"location":"sdk/about/resources/colors/","title":"Colors","text":"<p>The table below contains all the colors used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> Key Description Default \u00a0 <code>#ARGB</code> <code>scheme</code> Specifies whether the theme uses a light or dark color scheme.The provided colors should match the selected scheme <code>light</code> General <code>brand</code> The main accent color of your application <code>#FF4000FF</code> <code>primary</code> Primary text elements <code>#FF000000</code> <code>secondary</code> Secondary text elements <code>#FF9F9F9F</code> <code>onDark</code> Preferably light color in any scheme to be usedon dark, brand and neutral backgrounds It should be contrast enough with <code>brand</code> color <code>#FFFFFFFF</code> <code>onLight</code> Preferably dark color in any scheme to be usedon light backgrounds It should be high contrast with <code>onDark</code> color <code>#FF000000</code> <code>background</code> The main background color of the SDK and bottom sheets <code>#FFFFFFFF</code> <code>screen</code> Zero-elevation background color.For full-screen mode in <code>dark</code> scheme, this color is used asa background color, while bottom sheets inside the SDK willstill use the <code>background</code> color. In any scheme it will be usedfor full-screen image galleries It's actually supposed to be black or close to black in any scheme <code>#FF000000</code> <code>neutral</code> A neutral background color used for components <code>#FFF2F2F7</code> <code>border</code> The color used for component borders <code>#FFE5E5EA</code> <code>outline</code> Blur outlines and checkmark borders <code>#FFC7C7CC</code> Selection <code>selectionBackground</code> Background color for selection snackbar <code>#FF000000</code> Error <code>errorBackground</code> Background color for error snackbar <code>#FFEF5754</code> <code>errorPrimary</code> Primary color for error text in the snackbar <code>#FFFFFFFF</code> ProductBar  Price <code>discountedPrice</code> Color for discounted price text <code>#FFFB1010</code> PowerBar <code>aiuta</code> Color for Aiuta branding This is not a fully customizable color,you can choose between:- <code>standard</code> to use the Aiuta brand color and- <code>primary</code> to not highlight the Aiuta label. <code>standard</code>"},{"location":"sdk/about/resources/icons/","title":"Icons","text":"<p>The table below contains all the icons used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> <p>Icon coloring</p> <p>Each icon can be used in two ways:</p> <ul> <li>As an image <code>template</code> \u2014 the SDK will automatically color it depending on where it is used</li> <li>As an <code>original</code> image \u2014 the SDK will use it without any color changes</li> </ul> Key Description Icon PageBar <code>back24</code> Back button in navigation bars <code>close24</code> Close button in navigation bars Selection <code>check20</code> Selection indicator <code>trash24</code> Delete/remove item button Error <code>error36</code> General error icon Image <code>imageError36</code> Image loading error icon ProductBar <code>arrow16</code> Navigation arrow in product bar to open details Welcome Screen <code>welcome82</code> Welcome screen central icon above the title <sup>1</sup> Onboarding <code>onboardingBestResultsGood24</code> Good results badge in onboarding <code>onboardingBestResultsBad24</code> Bad results badge in onboarding ImagePicker  Camera <code>camera24</code> Camera capture button ImagePicker  Gallery <code>gallery24</code> Gallery access button ImagePicker  PredefinedModel <code>selectModels24</code> Model selection button TryOn <code>magic20</code> Try-on button TryOn  Loading <code>loading14</code> Loading indicator <sup>2</sup> TryOn  FitDisclaimer <code>info20</code> Information icon for fit disclaimer TryOn  Feedback <code>like36</code> Like/positive feedback button <code>dislike36</code> Dislike/negative feedback button <code>gratitude40</code> Gratitude screen illustration <sup>3</sup> TryOn  OtherPhoto <code>changePhoto24</code> Change photo button TryOn  History <code>history24</code> History access button for page bar Share <code>share24</code> Share button Wishlist <code>wishlist24</code> Add to wishlist button <code>wishlistFill24</code> Remove from wishlist button <ol> <li> <p>This icon is supposed to be pre-colored.\u00a0\u21a9</p> </li> <li> <p>The system activity indicator will be used if no icon is provided.\u00a0\u21a9</p> </li> <li> <p>\ud83e\udde1 emoji will be used if no icon is provided.\u00a0\u21a9</p> </li> </ol>"},{"location":"sdk/about/resources/images/","title":"Images","text":"<p>The table below contains all the images used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> Key Description Default Welcome Screen <code>welcomeBackground</code> Background image to fill the welcome screen Onboarding  How It Works <code>onboardingHowItWorksItems[0]</code><code>(itemPreview, itemPhoto)</code> First pair of samples <code>onboardingHowItWorksItems[1]</code><code>(itemPreview, itemPhoto)</code> Second pair of samples <code>onboardingHowItWorksItems[2]</code><code>(itemPreview, itemPhoto)</code> Third pair of samples Onboarding  Best Results <code>onboardingBestResultsGood[]</code> Collection of good input examples <code>onboardingBestResultsBad[]</code> Collection of bad input examples ImagePicker  Examples <code>imagePickerExamples[]</code> Examples of a good input Share <code>shareWatermark</code> Watermark for shared images"},{"location":"sdk/about/resources/localization/","title":"Providing localized text content","text":"<p>The table below contains all the strings that may be localized or changed for the SDK:</p> <p> default value is included in the SDK but may be changed or localized</p> <p> sample value that needs to be provided explicitly</p> <p> \u00a0 sample value that can be <code>null</code> <sup>1</sup> to hide a label/text field</p> <p> \u00a0 this field supports subset of <code>html</code> tags (e.g., <code>b</code>, <code>i</code>, <code>u</code>)</p> <p> \u00a0 this field supports links (<code>a href</code>)</p> <p> \u00a0 alternative variant</p> <p>Tip</p> <p>You can select the table content excluding the header, copy and paste it into Google Sheets for translation purposes. </p> Key Default or sample value Welcome Screen <code>welcomeTitle</code> Try on you <code>welcomeDescription</code> Welcome to our Virtual try-on.Try on the item directly on your photo <code>welcomeButtonStart</code> Let's start Onboarding <code>onboardingButtonNext</code> Next <code>onboardingButtonStart</code> Start Onboarding  HowItWorks <code>onboardingHowItWorksPageTitle</code> How it works<code>&lt;b&gt;Step 1/2&lt;/b&gt; - How it works</code> <code>onboardingHowItWorksTitle</code> Try on before buying <code>onboardingHowItWorksDescription</code> Upload a photo and see how items look on you Onboarding  BestResults <code>onboardingBestResultsPageTitle</code> For best results<code>&lt;b&gt;Step 2/2&lt;/b&gt; - For best results</code> <code>onboardingBestResultsTitle</code> For best results <code>onboardingBestResultsDescription</code> Use a photo with good lighting, stand straight a plain background Consent  Embedded <code>consentHtml</code> <sup>2</sup> Your photos will be processed by Terms of Use Consent  Standalone <code>consentPageTitle</code> Consent page title <code>consentTitle</code> Consent title <code>consentDescriptionHtml</code> Consent description <code>consents[].html</code> Consents <code>consentFooterHtml</code> Consent footer <code>consentButtonAccept</code> Accept ImagePicker <code>imagePickerTitle</code> Upload a photo of you <code>imagePickerDescription</code> Select a photo where you are standing straight and clearly visible <code>imagePickerButtonUploadPhoto</code> Upload a photo ImagePicker  Camera <code>cameraButtonTakePhoto</code> Take a photo <code>cameraPermissionTitle</code> Camera permission <code>cameraPermissionDescription</code> Please allow access to the camera in the application settings <code>cameraPermissionButtonOpenSettings</code> Settings ImagePicker  Gallery <code>galleryButtonSelectPhoto</code> Choose from library ImagePicker  PredefinedModel <code>predefinedModelsTitle</code> Select your model <code>predefinedModelsOr</code> Or <code>predefinedModelsEmptyListError</code> The models list is empty <code>predefinedModelsCategories</code> <sup>3</sup> <code>{\"man\": \"Men\", \"woman\": \"Women\"}</code> ImagePicker  UploadsHistory <code>uploadsHistoryButtonNewPhoto</code> <sup>4</sup> + New photo or model+ Upload new photo <code>uploadsHistoryTitle</code> Previously used <code>uploadsHistoryButtonChangePhoto</code> Change photo TryOn <code>tryOnPageTitle</code> Virtual Try-on <code>tryOn</code> Try on TryOn  Loading <code>tryOnLoadingStatusUploadingImage</code> Uploading image <code>tryOnLoadingStatusScanningBody</code> Scanning the body <code>tryOnLoadingStatusGeneratingOutfit</code> Generating outfit TryOn  InputValidation <code>invalidInputImageDescription</code> We couldn't detect anyone in this photo <code>invalidInputImageChangePhotoButton</code> Change photo TryOn  Cart <code>addToCart</code> Add to cart TryOn  FitDisclaimer <code>fitDisclaimerTitle</code> Results may vary from real-life fit <code>fitDisclaimerDescription</code> Virtual try-on is a visualization tool that shows how items might lookand may not perfectly represent how the item will fit in reality <code>fitDisclaimerCloseButton</code> Close TryOn  Feedback <code>feedbackTitle</code> Can you tell us more? <code>feedbackOptions</code> <code>[\"This style isn't for me\",</code><code>\"The item looks off\",</code><code>\"I look different\"]</code> <code>feedbackButtonSkip</code> Skip <code>feedbackButtonSend</code> Send <code>feedbackGratitudeText</code> Thank you for your feedback TryOn  Feedback  Other <code>feedbackOptionOther</code> Other <code>otherFeedbackTitle</code> Tell us what we could improve? <code>otherFeedbackButtonSend</code> Send feedback <code>otherFeedbackButtonCancel</code> <sup>5</sup> Cancel TryOn  History <code>generationsHistoryPageTitle</code> History Share <code>shareButton</code> Share Wishlist <code>wishlistButtonAdd</code> Wishlist Selection <code>select</code> Select <code>cancel</code> Cancel <code>selectAll</code> Select all <code>unselectAll</code> Unselect all Error <code>defaultErrorMessage</code> Something went wrong.Please try again later <code>tryAgainButton</code> Try again PowerBar <code>poweredByAiuta</code> Powered by Aiuta <ol> <li> <p>In most cases an empty string will have the same effect, but the SDK has validation for developers to check the configuration is correct. To clearly distinguish between erroneously empty strings and explicitly hidden ones, we recommend using <code>null</code>  to hide and never using empty strings.\u00a0\u21a9</p> </li> <li> <p><code>&lt;b&gt;&lt;a href='https://aiuta.com/legal/terms-of-service.html'&gt;Terms of Use&lt;/a&gt;</code> \u21a9</p> </li> <li> <p>This is a map from models category identifiers to their names.  The <code>predefinedModelCategories</code> are usually should cover 2 categories  with ids <code>man</code> and <code>woman</code>, but can be extended in the future or by your agreement with Aiuta.\u00a0\u21a9</p> </li> <li> <p>Use this variant if the try-on with models feature is disabled\u00a0\u21a9</p> </li> <li> <p>The Close button with a cross icon will be used if no string is specified\u00a0\u21a9</p> </li> </ol>"},{"location":"sdk/about/resources/other/","title":"Other styles, toggles and settings","text":"<p>This page contains descriptions of additional unclassified settings for various user interface components that provide more configuration flexibility.</p>"},{"location":"sdk/about/resources/other/#page-bar","title":"Page Bar","text":"<p>A toggle to specify whether the close button should be positioned on the right side.</p> Default<code>preferCloseButtonOnTheRight</code> <p></p> <p> </p>"},{"location":"sdk/about/resources/other/#bottom-sheet","title":"Bottom Sheet","text":"<p>Adjusting delimiters in the bottom sheet icon buttons</p> Default<code>extendDelimitersToTheRight</code><code>extendDelimitersToTheLeftAndRight</code> <p></p> <p></p> <p></p>"},{"location":"sdk/about/resources/other/#component-style","title":"Component Style","text":"<p>Adjusting colors on some buttons and status views, where explicitly available</p> <p>Shapes are independent and are not affected by this styles</p> <code>brand</code><code>contrast</code><code>contrastInverted</code><code>blurred</code><code>blurredWithOutline</code> <p></p> <ul> <li><code>brand</code> background color</li> <li><code>onDark</code> foreground color for labels and icons</li> </ul> <p></p> <ul> <li><code>onLight</code> background color</li> <li><code>onDark</code> foreground color for labels and icons</li> </ul> <p></p> <ul> <li><code>onDark</code> background color</li> <li><code>onLight</code> foreground color for labels and icons</li> </ul> <p></p> <ul> <li>apply a blurred background that matches the color <code>scheme</code> (<code>light</code> or <code>dark</code>)</li> <li><code>primary</code> foreground color for labels and icons</li> </ul> <p></p> <ul> <li>apply a blurred background that matches the color <code>scheme</code> (<code>light</code> or <code>dark</code>)</li> <li><code>primary</code> foreground color for labels and icons</li> <li><code>outline</code> color for the border</li> </ul> <p>Refer to the  colors </p>"},{"location":"sdk/about/resources/shapes/","title":"Shapes","text":"<p>The table below contains all the shapes used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> Key Description Default Image <code>imageL</code> Large image corner radius <code>24</code> <code>imageM</code> Medium image corner radius <code>16</code> Button <code>buttonM</code> Medium button corner radius <code>8</code> <code>buttonS</code> Small button corner radius <code>8</code> BottomSheet <code>bottomSheet</code> Bottom sheet corner radius <code>16</code> BottomSheet  Grabber <code>grabberWidth</code> Width of the bottom sheet grabber <code>36</code> <code>grabberHeight</code> Height of the bottom sheet grabber <code>4</code> <code>grabberOffset</code> Grabber offset from the top <code>6</code> Onboarding <code>onboardingImageL</code> Large onboarding image corner radius <code>16</code> <code>onboardingImageS</code> Small onboarding image corner radius <code>16</code> TryOn.Feedback <code>feedbackButton</code> Feedback button corner radius <code>infinity</code>"},{"location":"sdk/about/resources/typography/","title":"Typography","text":"<p>The table below contains all the text styles used in the SDK:</p> <p> \u00a0 This is optional and can be omitted if you are not using the corresponding feature</p> Key Description Default Label <code>titleL</code> Large titles <code>System 24pt Bold</code> <code>titleM</code> Medium titles <code>System 20pt Bold</code><code>kern -0.4</code> <code>regular</code> Regular text <code>System 17pt Medium</code><code>kern -0.51, lhm 1.08</code> <sup>1</sup> <code>subtle</code> Subtle text <code>System 15pt Regular</code><code>kern -0.15, lhm 1.01</code> <sup>1</sup> Button <code>buttonM</code> Medium buttons <code>System 17pt Semibold</code><code>kern -0.17, lhm 0.89</code> <sup>1</sup> <code>buttonS</code> Small buttons <code>System 13pt Semibold</code><code>kern -0.13, lhm 1.16</code> <sup>1</sup> PageBar <code>pageTitle</code> Page titles <code>System 17pt Medium</code><code>kern -0.51, lhm 1.08</code> <sup>1</sup> BottomSheet <code>iconButton</code> Icon buttons <code>System 17pt Medium</code><code>kern -0.17</code> ProductBar <code>product</code> Product names <code>System 13pt Regular</code> <code>brand</code> Brand names <code>System 12pt Medium</code><code>kern -0.12</code> ProductBar  Price <code>price</code> Price text <code>System 14pt Bold</code><code>kern -0.14</code> Welcome Screen <code>welcomeTitle</code> Welcome screen title <code>System 40pt Heavy</code><code>lhm 0.92</code> <code>welcomeDescription</code> Welcome screen description <code>System 16pt Medium</code><code>lhm 1.18</code> <sup>1</sup> TryOn  FitDisclaimer <code>disclaimer</code> Fit disclaimer label <code>System 12pt Regular</code><code>kern -0.12</code> <ol> <li> <p><code>lhm</code> is Line Height Multiple relative to the original line height of the font\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"sdk/android/quick-start/","title":"Android SDK","text":"<p>Info</p> <p>Docs under construction</p> <p>In this tutorial, you will learn how to initialize the SDK and figure out how to create your own application using all the features of Aiuta</p> <p>Code example is here</p> <p>The Aiuta SDK for Android provides the ability to use public methods provided by Aiuta from dev portal.</p>"},{"location":"sdk/android/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial: - Install Android Studio</p>"},{"location":"sdk/android/quick-start/#create-a-new-project","title":"Create a new project","text":"<p>First of all, we need to create a project in which we will use the Aiuta SDK</p> <p>How to create new project in Android Studio</p> <ol> <li>On the Welcome screen, click New Project. Otherwise, from the main menu, select File | New | New Project.</li> <li>Choose Empty Activity project</li> <li>Wait for synchronization of IDEA</li> </ol>"},{"location":"sdk/android/quick-start/#add-dependencies","title":"Add dependencies","text":"<p>Let's add dependencies required for a Aiuta SDK.</p> <ul> <li>Be sure, that you use mavenCentral for solving dependencies in your root build.gradle.kts file</li> </ul> <pre><code>repositories {\n    mavenCentral()\n}\n</code></pre> <ul> <li>Solve what the last version of Aiuta sdk on Github releases page</li> </ul> <p>Note</p> <p>You also can check last version of artifacts on Central Sonatype</p> <ul> <li>Open the app/build.gradle.kts file and add the following artifacts to the dependencies block:</li> </ul> <pre><code>dependencies {\n    val fashionVersion: String = \"%latest_fashion_version%\"\n    implementation(\"com.aiuta:fashionsdk:$fashionVersion\")\n}\n</code></pre> <p>Note</p> <p>Pay your attention on using the Bill of Materials</p>"},{"location":"sdk/flutter/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the fundamental usage of the Aiuta Flutter SDK in your application.</p>"},{"location":"sdk/flutter/basic-usage/#checking-availability","title":"Checking Availability","text":"<pre><code>import 'package:aiuta_flutter/aiuta_flutter.dart';\n\nfinal isAvailable = await Aiuta.isAvailable;\n</code></pre> When might the SDK be unavailable? <p>Since iOS SDK requires iOS 13.0 or later to operate, but can be compiled for iOS 12.0, this will always completes with false if the iOS version is lower than 13.0.</p> <p>On Android this future will most likely completes with true as it can not be compiled with unsupported toolchains.</p> <p>Other platforms will return false.</p> <p>Additional checks for availability are performed in the native code, and may be extended in the future.</p>"},{"location":"sdk/flutter/basic-usage/#initialization","title":"Initialization","text":"<p>First, make sure you've configured the SDK as described in the Configuration guide.</p> <pre><code>import 'package:aiuta_flutter/aiuta_flutter.dart';\n\nfinal aiuta = Aiuta(\n  configuration: AiutaConfiguration(...) // (1)!\n);\n</code></pre> <ol> <li> <p>Your configuration for Aiuta</p> <p> Please refer to the configuration scheme</p> </li> </ol>"},{"location":"sdk/flutter/basic-usage/#virtual-try-on","title":"Virtual Try-On","text":"<p>To start the virtual try-on flow for a product:</p> <pre><code>class ProductScreen extends StatelessWidget {\n  final Aiuta aiuta;\n\n  Future&lt;void&gt; startTryOn() async {\n    try {\n      await aiuta.startTryonFlow(\n        product: AiutaProduct(...) // (1)!\n      );\n    } catch (e) {\n      // Handle errors\n    }\n  }\n\n  // ... rest of your widget\n}\n</code></pre> <ol> <li> <p>Your product info for Aiuta</p> <p> Please refer to the product scheme</p> </li> </ol> When does startTryonFlow Future completes? <p>The <code>startTryonFlow</code> Future completes when:</p> <ol> <li>The plugin has successfully connected to the native layer</li> <li>All parameters have been passed to the native layer</li> <li>The native layer has been configured and accepted the parameters</li> <li>The SDK UI has been displayed to the user</li> </ol> <p>This means the Future completes once the SDK UI is visible, not when the user completes or dismisses the try-on flow. To handle user completion, you should implement appropriate analytics listeners.</p> <p>Similarly, the <code>startHistoryFlow</code> method follows the same completion pattern - it completes when the history UI is displayed, not when the user finishes interacting with it.</p> What errors may occur and require handling? <p>The SDK may throw errors that generally indicate something completely wrong:</p> <ol> <li>The Flutter plugin cannot connect to the native SDK due to technical issues.</li> <li>The native SDK cannot parse the configuration or parameters sent from the plugin.</li> <li>The method is called on an unsupported platform without checking <code>isAvailable</code> first.</li> <li>The native SDK cannot find a valid UI context to display itself.</li> </ol> <p>These errors typically represent SDK issues rather than runtime conditions:</p> <ul> <li>They should never occur</li> <li>They cannot be fixed at runtime</li> <li>Retrying the operation is unlikely to succeed</li> <li>The best approach is to log and report them as bugs</li> </ul>"},{"location":"sdk/flutter/basic-usage/#viewing-try-on-history","title":"Viewing Try-On History","text":"<p>To show the user's try-on history:</p> <pre><code>try {\n  await aiuta.startHistoryFlow();\n} catch (e) {\n  // Handle errors\n}\n</code></pre>"},{"location":"sdk/flutter/basic-usage/#checking-state","title":"Checking State","text":"<p>You can check at any time whether the SDK UI is currently displayed:</p> <pre><code>final isDisplayed = await Aiuta.isForeground;\n</code></pre>"},{"location":"sdk/flutter/configuration/","title":"Configuration Guide","text":"<p>The Aiuta Flutter SDK is highly configurable to meet your specific needs.</p>"},{"location":"sdk/flutter/configuration/#basic-configuration","title":"Basic Configuration","text":"<p>The SDK is configured using the <code>AiutaConfiguration</code> class, which contains several key components:</p> <pre><code>import 'package:aiuta_flutter/aiuta_flutter.dart';\n\nfinal configuration = AiutaConfiguration( // (1)!\n  auth: AiutaAuth(...), // (2)!\n  userInterface: AiutaUserInterfaceConfiguration(...), // (3)!\n  features: AiutaFeatures(...), // (4)!\n  analytics: AiutaAnalytics(...) | null, // (5)!\n  debugSettings: AiutaDebugSettings(...) // (6)!\n);\n\nfinal aiuta = Aiuta(configuration: configuration);\n</code></pre> <ol> <li>The main configuration class that initializes all SDK components. All required parameters must be provided, while analytics is optional</li> <li>Required: Handles API authentication and token management</li> <li>Required: Controls SDK presentation and visual appearance</li> <li>Required: Manages SDK features and their interactions</li> <li>Optional: Tracks SDK events and user interactions</li> <li>Required: Controls logging and validation behavior</li> </ol>"},{"location":"sdk/flutter/configuration/#configuration-scheme","title":"Configuration Scheme","text":"<p>The Aiuta SDK for Flutter employs a standardized configuration scheme consistent with our other SDKs. Just as the primary <code>AiutaConfiguration</code> and its associated property class names have been modified to adhere to the naming conventions, all other internal classes will be updated similarly.</p> <ul> <li> Please refer to the configuration scheme</li> </ul>"},{"location":"sdk/flutter/configuration/#next-step","title":"Next Step","text":"<ul> <li> \u00a0 Learn how to initialize and use the SDK</li> </ul>"},{"location":"sdk/flutter/installation/","title":"Installation","text":"<p>Use Aiuta Flutter SDK package  as a library to integrate into your application.</p>"},{"location":"sdk/flutter/installation/#depend-on-it","title":"Depend on it","text":"<p>Run this command with Flutter:</p> <pre><code> $ flutter pub add aiuta_flutter\n</code></pre> <p>This will add a line like this to your package's <code>pubspec.yaml</code> (and run an implicit <code>flutter pub get</code>):</p> <pre><code>dependencies:\n  aiuta_flutter: ^4.0.0\n</code></pre> <p>Alternatively, your editor might support <code>flutter pub get</code>.Check the docs for your editor to learn more.</p>"},{"location":"sdk/flutter/installation/#import-it","title":"Import it","text":"<p>Now in your Dart code, you can use:</p> <pre><code>import 'package:aiuta_flutter/aiuta_flutter.dart';\n</code></pre>"},{"location":"sdk/flutter/installation/#next-step","title":"Next Step","text":"<ul> <li> \u00a0 Initialize with Configuration</li> </ul>"},{"location":"sdk/flutter/quick-start/","title":"Flutter SDK","text":"<p>The Aiuta Flutter SDK provides a virtual try-on solution as a plug-in package  that includes platform-specific implementation code and depends of native SDKs for Android and iOS that uses Aiuta Digital Try On API.</p>"},{"location":"sdk/flutter/quick-start/#requirements","title":"Requirements","text":"<pre><code>sdk: &gt;=3.1.0 &lt;4.0.0\nflutter: &gt;= 3.19.6\n</code></pre> AndroidiOS <pre><code>minSdkVersion: 23\ntargetSdkVersion: 35\ncom.android.application: 8.6.0\nndkVersion: 26.1.10909125\n</code></pre> <pre><code>iOS: 13+\nswift: 5.10\nXcode: 15.3+\n</code></pre> <p>Can be compiled for iOS <code>12+</code>, but the SDK will not be available for use Check availability at runtime if the target platform is iOS 12.</p>"},{"location":"sdk/flutter/quick-start/#quick-start","title":"Quick Start","text":"<ol> <li>Installation</li> <li>Configuration</li> <li>Basic Usage</li> </ol>"},{"location":"sdk/flutter/quick-start/#package-and-sources","title":"Package and Sources","text":"<ul> <li> Pub.dev package </li> <li> Plugin sources </li> <li> Android layer sources </li> <li> iOS layer sources </li> </ul>"},{"location":"sdk/flutter/migration/v4/","title":"Migration to the SDK version 4","text":"<p>This document provides an overview of the changes introduced in SDK version 4. It includes:</p> <ul> <li>updates in the management of user data \u2014 completion states, consents, and historical records;</li> <li>image ownership and changes the backend processes for deleting images upon user requests, which now take into account the ownership of the images;</li> <li>the general changes made to the configuration and features.</li> </ul> Why does version 4 come after version 1? <p>The Aiuta Flutter SDK has transitioned directly from version 1 to version 4, skipping versions 2 and 3. This decision aligns with our new policy to ensure that all mobile platforms \u2014 Android, iOS, and Flutter \u2014 are delivered simultaneously with the same functionality and based on a unified scheme. By synchronizing the version numbers across all platforms, we aim to provide a consistent and cohesive experience for developers working with our SDKs. The choice of version 4 as the next release was determined by the least common version number across Android, iOS, and Flutter, ensuring that all platforms are now aligned under the same versioning system. This unified approach simplifies the development process and ensures feature parity across different mobile environments.</p>"},{"location":"sdk/flutter/migration/v4/#platform-build-requirements","title":"Platform &amp; Build Requirements","text":"<ul> <li> <p> Android</p> <pre><code>minSdkVersion: 23\ntargetSdkVersion: 35\ncom.android.application: 8.6.0\nndkVersion: 26.1.10909125\n</code></pre> </li> <li> <p> iOS</p> <pre><code>iOS: 12+\nswift: 5.10\nXcode: 15.3+\n</code></pre> </li> </ul>"},{"location":"sdk/flutter/migration/v4/#data-management","title":"Data management","text":""},{"location":"sdk/flutter/migration/v4/#onboarding-completion-state","title":"Onboarding completion state","text":"<p>In this version, onboarding and the consent pages are not so tightly coupled. There are several configuration options when the SDK cannot determine whether to not show onboarding again. Therefore, a <code>dataProvider</code> has been added to manage the onboarding state.</p> <p> Please refer to the <code>OnboardingFeature</code> scheme and the Onboarding page Data Management</p> How to determine this status for current users? <p>For existing users, you can set <code>isOnboardingCompleted</code> based on whether main <code>consent</code> was previously obtained, as consent was a mandatory final slide of the onboarding process in the first version.</p>"},{"location":"sdk/flutter/migration/v4/#user-consents","title":"User consents","text":"<p>This version significantly expands the possibilities of how, when, and what to ask the user for consent. This required adding data models for consents and operating them with identifiers.</p> <p> Please refer to the:</p> <ul> <li><code>Consent</code> model sheme</li> <li>One of <code>Standalone</code> consent configuration and its <code>dataProviders</code></li> <li>Standalone consent page overview - this page contains Data Management section explaining how does the SDK decide when to request consent.</li> </ul> How to map existing data? <p>If you did not have internal identifiers for consents and only stored the status, create one, for example, <code>main</code> and provide it in the list of received consents for the SDK depending on the state flag you stored earlier.</p> <p>If you already have internal identifiers, simply provide them to the SDK.</p>"},{"location":"sdk/flutter/migration/v4/#users-history-images","title":"Users' History Images","text":"<p>Image data models have two key updates:</p> <ul> <li>Uploaded images and generated images are now distinguished by class - generated images must store their associated product IDs.</li> <li>Both data models now have an owner type - this is to distinguish users' personal images from model images provided by Aiuta.</li> </ul> <p> Please refer to the:</p> <ul> <li>History images model shemes</li> </ul> <p>Do not delete <code>aiuta</code> owned image files</p> <p>Well, you can make a request to delete such an image, nothing terrible will happen, but be prepared that Aiuta API will return an error when you try.</p> <p>But ideally, you should only link/unlink those images in the user's history.</p> How to determine product identifiers for old images? <p>If you have not previously saved the connections between products and generated images, this data cannot be restored. But don't worry, just pass an empty list to the SDK, and this will only result in the absence of accompanying text/links when the user wants to share a previously generated image.</p>"},{"location":"sdk/ios/quick-start/","title":"iOS SDK","text":"<p>Info</p> <p>Docs under construction</p>"},{"location":"sdk/web/quick-start/","title":"Web SDK","text":"<p>Info</p> <p>Coming soon</p>"},{"location":"shopify/overview/","title":"Aiuta Virtual Try-On Shopify App","text":"<p>Aiuta Try-On allows shoppers to see how clothes fit and look on them in real time, answering the key question: \u201cWill this item suit me?\u201d</p>"},{"location":"shopify/overview/#links","title":"Links","text":"<ul> <li> View in the Shopify app store</li> <li> Open demo store</li> </ul>"},{"location":"shopify/overview/#benefits","title":"Benefits","text":"<p>The app integrates seamlessly with your product pages, enhancing customer confidence and reducing returns. Perfect for brands of any size looking to drive engagement and conversions!</p> <ul> <li>Realistic &amp; Quick Virtual Try-On solution</li> <li>Fit Optimization that adapts clothing visuals to different body types</li> <li>Seamless Integration in just 2 steps</li> </ul>"}]}